package main

import (
	"bufio"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"sort"
	"strconv"
	"strings"
	"time"
)

const (
	ColorReset  = "\033[0m"
	ColorRed    = "\033[31m"
	ColorGreen  = "\033[32m"
	ColorYellow = "\033[33m"
	ColorBlue   = "\033[34m"
	ColorPurple = "\033[35m"
	ColorCyan   = "\033[36m"
	ColorWhite  = "\033[37m"
	ColorBold   = "\033[1m"
)

type GitManager struct {
	currentPath string
	scanner     *bufio.Scanner
}

func NewGitManager() *GitManager {
	currentPath, _ := os.Getwd()
	return &GitManager{
		currentPath: currentPath,
		scanner:     bufio.NewScanner(os.Stdin),
	}
}

// General Helpers
func (gm *GitManager) getUserInput() string {
	if gm.scanner.Scan() {
		return strings.TrimSpace(gm.scanner.Text())
	}
	if err := gm.scanner.Err(); err != nil {
		fmt.Printf("%sErreur de lecture: %v%s\n", ColorRed, err, ColorReset)
	}
	return ""
}

func (gm *GitManager) pause() {
	fmt.Printf("\n%sAppuyez sur Entr√©e pour continuer...%s", ColorYellow, ColorReset)
	gm.getUserInput()
}

func (gm *GitManager) clearScreen() {
	cmd := exec.Command("clear")
	cmd.Stdout = os.Stdout
	err := cmd.Run()
	if err != nil {
		// Fallback for windows
		cmd = exec.Command("cmd", "/c", "cls")
		cmd.Stdout = os.Stdout
		cmd.Run()
	}
}

func (gm *GitManager) runGitCommand(args ...string) (string, error) {
	cmd := exec.Command("git", args...)
	cmd.Dir = gm.currentPath
	output, err := cmd.CombinedOutput()
	return strings.TrimSpace(string(output)), err
}

func (gm *GitManager) isGitRepo() bool {
	_, err := os.Stat(filepath.Join(gm.currentPath, ".git"))
	return err == nil
}

// UI and Menu
func (gm *GitManager) printHeader() {
	fmt.Printf("%s%s‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó%s\n", ColorBold, ColorCyan, ColorReset)
	fmt.Printf("%s%s‚ïë                     üîß GIT MANAGER CLI üîß                     ‚ïë%s\n", ColorBold, ColorCyan, ColorReset)
	fmt.Printf("%s%s‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù%s\n", ColorBold, ColorCyan, ColorReset)
	fmt.Printf("%sR√©pertoire actuel: %s%s%s\n\n", ColorYellow, ColorWhite, gm.currentPath, ColorReset)
}

// Modification de la fonction showMenu() pour inclure un acc√®s rapide
func (gm *GitManager) showMenu() {
	gm.printHeader()

	if gm.isGitRepo() {
		gm.showQuickStatus()
		gm.showQuickActions() // Nouvelle fonction pour les acc√®s rapides
	}

	fmt.Printf("%s%s‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê%s\n", ColorBold, ColorBlue, ColorReset)
	fmt.Printf("%s%s                           üìã MENU PRINCIPAL                           %s\n", ColorBold, ColorBlue, ColorReset)
	fmt.Printf("%s%s‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê%s\n", ColorBold, ColorBlue, ColorReset)

	// SECTION ACC√àS RAPIDE
	fmt.Printf("%s%s‚ö° ACC√àS RAPIDE:%s\n", ColorBold, ColorYellow, ColorReset)
	fmt.Printf("%s S%s  üìä Statut d√©taill√©\n", ColorCyan, ColorReset)
	fmt.Printf("%s C%s  üì¶ Commits (nouveau/historique)\n", ColorCyan, ColorReset)
	fmt.Printf("%s F%s  üìÅ Fichiers (add/diff)\n", ColorCyan, ColorReset)
	fmt.Printf("%s B%s  üåø Branches (cr√©er/changer)\n", ColorCyan, ColorReset)
	fmt.Printf("%s R%s  üîÑ Remote (push/pull)\n", ColorCyan, ColorReset)

	fmt.Printf("\n%s%süìã MENU COMPLET:%s\n", ColorBold, ColorGreen, ColorReset)
	fmt.Printf("%s 1.%s  üìä Statut d√©taill√© du d√©p√¥t\n", ColorGreen, ColorReset)
	fmt.Printf("%s 2.%s  üåø Gestion des branches\n", ColorGreen, ColorReset)
	fmt.Printf("%s 3.%s  üì¶ Gestion des commits\n", ColorGreen, ColorReset)
	fmt.Printf("%s 4.%s  üîÑ Gestion des remotes\n", ColorGreen, ColorReset)
	fmt.Printf("%s 5.%s  üìÅ Gestion des fichiers\n", ColorGreen, ColorReset)
	fmt.Printf("%s 6.%s  üè∑Ô∏è  Gestion des tags\n", ColorGreen, ColorReset)
	fmt.Printf("%s 7.%s  üóÇÔ∏è  Gestion des stash\n", ColorGreen, ColorReset)
	fmt.Printf("%s 8.%s  üìà Statistiques et logs\n", ColorGreen, ColorReset)
	fmt.Printf("%s 9.%s  üîß Outils et configuration\n", ColorGreen, ColorReset)
	fmt.Printf("%s10.%s  üìÇ Changer de r√©pertoire\n", ColorGreen, ColorReset)
	fmt.Printf("%s11.%s  üöÄ Initialiser un nouveau d√©p√¥t\n", ColorGreen, ColorReset)
	fmt.Printf("%s 0.%s  üö™ Quitter\n", ColorRed, ColorReset)

	fmt.Printf("\n%sChoisissez une option: %s", ColorYellow, ColorReset)
}

func (gm *GitManager) showQuickStatus() {
	branch := gm.getCurrentBranch()
	status := gm.getGitStatus()

	fmt.Printf("%s%süìç Branche actuelle: %s%s%s\n", ColorBold, ColorGreen, ColorCyan, branch, ColorReset)

	if status != "" {
		lines := strings.Split(strings.TrimSpace(status), "\n")
		modified := 0
		staged := 0
		untracked := 0

		for _, line := range lines {
			if strings.HasPrefix(line, " M") || strings.HasPrefix(line, "AM") {
				modified++
			} else if strings.HasPrefix(line, "M ") || strings.HasPrefix(line, "A ") {
				staged++
			} else if strings.HasPrefix(line, "??") {
				untracked++
			}
		}

		if staged > 0 {
			fmt.Printf("%s‚úì %d fichier(s) en stage%s ", ColorGreen, staged, ColorReset)
		}
		if modified > 0 {
			fmt.Printf("%s‚ö† %d fichier(s) modifi√©(s)%s ", ColorYellow, modified, ColorReset)
		}
		if untracked > 0 {
			fmt.Printf("%s? %d fichier(s) non suivi(s)%s ", ColorRed, untracked, ColorReset)
		}
		fmt.Println()
	}
	fmt.Println()
}

// Nouvelle fonction pour afficher les actions rapides avec le statut
func (gm *GitManager) showQuickActions() {
	fmt.Printf("%s%s‚ö° ACTIONS RAPIDES DISPONIBLES:%s\n", ColorBold, ColorYellow, ColorReset)

	// Analyser le contexte pour sugg√©rer des actions
	status := gm.getGitStatus()
	staged, _ := gm.runGitCommand("diff", "--cached", "--name-only")
	currentBranch := gm.getCurrentBranch()

	if status != "" {
		if staged != "" {
			fmt.Printf("%s   üí° Vous avez des fichiers en stage ‚Üí tapez 'C' pour commiter%s\n", ColorGreen, ColorReset)
		} else {
			fmt.Printf("%s   üí° Fichiers modifi√©s d√©tect√©s ‚Üí tapez 'F' pour les ajouter%s\n", ColorYellow, ColorReset)
		}
	}

	if currentBranch == "main" || currentBranch == "master" {
		fmt.Printf("%s   üí° Sur branche principale ‚Üí tapez 'B' pour cr√©er une feature branch%s\n", ColorCyan, ColorReset)
	}

	fmt.Println()
}

// Git data retrievers
func (gm *GitManager) getCurrentBranch() string {
	output, err := gm.runGitCommand("branch", "--show-current")
	if err != nil {
		return "unknown"
	}
	return output
}

func (gm *GitManager) getGitStatus() string {
	output, _ := gm.runGitCommand("status", "--porcelain")
	return output
}

// Menu Handlers
// Version am√©lior√©e de handleDetailedStatus avec intelligence contextuelle
func (gm *GitManager) handleDetailedStatus() {
	if !gm.isGitRepo() {
		fmt.Printf("%s‚ùå Ce r√©pertoire n'est pas un d√©p√¥t Git!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	fmt.Printf("%s%süìä STATUT INTELLIGENT DU D√âP√îT%s\n", ColorBold, ColorBlue, ColorReset)
	fmt.Println(strings.Repeat("‚ïê", 60))

	// 1. INFORMATIONS DE BASE
	gm.showBasicRepoInfo()

	// 2. √âTAT DES FICHIERS (avec analyse intelligente)
	gm.showIntelligentFileStatus()

	// 3. INFORMATIONS SUR LES BRANCHES
	gm.showBranchInfo()

	// 4. SYNCHRONISATION REMOTE
	gm.showRemoteSync()

	// 5. DERNI√àRE ACTIVIT√â
	gm.showRecentActivity()

	// 6. SUGGESTIONS INTELLIGENTES
	gm.showIntelligentSuggestions()

	gm.pause()
}

// Informations de base du d√©p√¥t
func (gm *GitManager) showBasicRepoInfo() {
	currentBranch := gm.getCurrentBranch()
	lastCommit, _ := gm.runGitCommand("log", "-1", "--pretty=format:%h - %s (%an, %ar)")

	fmt.Printf("%süè† D√âP√îT:%s %s\n", ColorBold, ColorReset, filepath.Base(gm.currentPath))
	fmt.Printf("%süåø BRANCHE ACTUELLE:%s %s%s%s\n", ColorBold, ColorReset, ColorCyan, currentBranch, ColorReset)
	fmt.Printf("%süì¶ DERNIER COMMIT:%s %s\n", ColorBold, ColorReset, lastCommit)

	// Compter les commits
	totalCommits, _ := gm.runGitCommand("rev-list", "--count", "HEAD")
	if totalCommits != "" {
		fmt.Printf("%süìä TOTAL COMMITS:%s %s\n", ColorBold, ColorReset, totalCommits)
	}

	fmt.Println()
}

// Analyse intelligente de l'√©tat des fichiers
func (gm *GitManager) showIntelligentFileStatus() {
	status := gm.getGitStatus()
	staged, _ := gm.runGitCommand("diff", "--cached", "--name-only")

	fmt.Printf("%s%süìÅ √âTAT DES FICHIERS%s\n", ColorBold, ColorGreen, ColorReset)

	if status == "" && staged == "" {
		fmt.Printf("%s‚ú® Working directory clean - Aucun changement d√©tect√©%s\n", ColorGreen, ColorReset)
		fmt.Println()
		return
	}

	// Analyser et cat√©goriser les changements
	var modified, added, deleted, renamed, untracked, stagedFiles []string

	if status != "" {
		lines := strings.Split(strings.TrimSpace(status), "\n")
		for _, line := range lines {
			if len(line) < 3 {
				continue
			}
			statusCode := line[:2]
			fileName := line[3:]

			switch statusCode {
			case "M ", "AM":
				stagedFiles = append(stagedFiles, fileName+" (modifi√©)")
			case " M", "MM":
				modified = append(modified, fileName)
			case "A ":
				stagedFiles = append(stagedFiles, fileName+" (nouveau)")
				added = append(added, fileName) // Utiliser la variable 'added'
			case "D ":
				stagedFiles = append(stagedFiles, fileName+" (supprim√©)")
			case " D":
				deleted = append(deleted, fileName)
			case "R ":
				renamed = append(renamed, fileName)
			case "??":
				untracked = append(untracked, fileName)
			}
		}
	}

	// Affichage organis√© avec couleurs et statistiques
	if len(stagedFiles) > 0 {
		fmt.Printf("%s‚úÖ FICHIERS EN STAGE (%d):%s\n", ColorGreen, len(stagedFiles), ColorReset)
		for _, file := range stagedFiles {
			fmt.Printf("   %s‚ñ∂%s %s\n", ColorGreen, ColorReset, file)
		}

		// Statistiques des changements stag√©s
		statsOutput, _ := gm.runGitCommand("diff", "--cached", "--stat")
		if statsOutput != "" {
			fmt.Printf("%s   üìä Statistiques:%s\n", ColorCyan, ColorReset)
			lines := strings.Split(statsOutput, "\n")
			for _, line := range lines {
				if line != "" && !strings.Contains(line, "file") {
					fmt.Printf("   %s\n", line)
				}
			}
		}
		fmt.Println()
	}

	if len(modified) > 0 {
		fmt.Printf("%s‚ö†Ô∏è  FICHIERS MODIFI√âS (%d):%s\n", ColorYellow, len(modified), ColorReset)
		for i, file := range modified {
			if i < 10 { // Limiter l'affichage
				fmt.Printf("   %s‚óè%s %s\n", ColorYellow, ColorReset, file)
			} else if i == 10 {
				fmt.Printf("   %s... et %d autre(s)%s\n", ColorYellow, len(modified)-10, ColorReset)
				break
			}
		}
		fmt.Println()
	}

	// Afficher les fichiers ajout√©s s'il y en a (utilisation de la variable 'added')
	if len(added) > 0 {
		fmt.Printf("%s‚ûï NOUVEAUX FICHIERS (%d):%s\n", ColorBlue, len(added), ColorReset)
		for _, file := range added {
			fmt.Printf("   %s+%s %s\n", ColorBlue, ColorReset, file)
		}
		fmt.Println()
	}

	if len(untracked) > 0 {
		fmt.Printf("%s‚ùì FICHIERS NON SUIVIS (%d):%s\n", ColorRed, len(untracked), ColorReset)
		for i, file := range untracked {
			if i < 5 { // Limiter l'affichage pour les non suivis
				fmt.Printf("   %s?%s %s\n", ColorRed, ColorReset, file)
			} else if i == 5 {
				fmt.Printf("   %s... et %d autre(s)%s\n", ColorRed, len(untracked)-5, ColorReset)
				break
			}
		}
		fmt.Println()
	}

	if len(deleted) > 0 {
		fmt.Printf("%süóëÔ∏è  FICHIERS SUPPRIM√âS (%d):%s\n", ColorRed, len(deleted), ColorReset)
		for _, file := range deleted {
			fmt.Printf("   %s‚úó%s %s\n", ColorRed, ColorReset, file)
		}
		fmt.Println()
	}

	if len(renamed) > 0 {
		fmt.Printf("%süîÑ FICHIERS RENOMM√âS (%d):%s\n", ColorCyan, len(renamed), ColorReset)
		for _, file := range renamed {
			fmt.Printf("   %s‚Üª%s %s\n", ColorCyan, ColorReset, file)
		}
		fmt.Println()
	}
}

// Informations d√©taill√©es sur les branches
func (gm *GitManager) showBranchInfo() {
	fmt.Printf("%s%süåø INFORMATIONS BRANCHES%s\n", ColorBold, ColorGreen, ColorReset)

	currentBranch := gm.getCurrentBranch()

	// Branches locales
	localBranches, _ := gm.runGitCommand("branch", "--format=%(refname:short)")
	localCount := 0
	if localBranches != "" {
		localCount = len(strings.Split(strings.TrimSpace(localBranches), "\n"))
	}

	// Branches remote
	remoteBranches, _ := gm.runGitCommand("branch", "-r", "--format=%(refname:short)")
	remoteCount := 0
	if remoteBranches != "" {
		remoteCount = len(strings.Split(strings.TrimSpace(remoteBranches), "\n"))
	}

	fmt.Printf("%süìç Branche actuelle:%s %s%s%s\n", ColorBlue, ColorReset, ColorCyan, currentBranch, ColorReset)
	fmt.Printf("%süè† Branches locales:%s %d\n", ColorBlue, ColorReset, localCount)
	fmt.Printf("%süåê Branches remote:%s %d\n", ColorBlue, ColorReset, remoteCount)

	// V√©rifier si on est sur main/master
	if currentBranch == "main" || currentBranch == "master" {
		fmt.Printf("%s‚ö†Ô∏è  Vous √™tes sur la branche principale%s\n", ColorYellow, ColorReset)
	}

	// Derni√®res branches utilis√©es
	recentBranches, err := gm.runGitCommand("for-each-ref", "--count=3", "--sort=-committerdate",
		"--format=%(refname:short) (%(committerdate:relative))", "refs/heads/")
	if err == nil && recentBranches != "" {
		fmt.Printf("%süïê Branches r√©cemment utilis√©es:%s\n", ColorCyan, ColorReset)
		lines := strings.Split(recentBranches, "\n")
		for _, line := range lines {
			if line != "" {
				fmt.Printf("   %s\n", line)
			}
		}
	}
	fmt.Println()
}

// √âtat de synchronisation avec les remotes
func (gm *GitManager) showRemoteSync() {
	fmt.Printf("%s%süîÑ SYNCHRONISATION REMOTE%s\n", ColorBold, ColorPurple, ColorReset)

	// V√©rifier les remotes configur√©s
	remotes, _ := gm.runGitCommand("remote", "-v")
	if remotes == "" {
		fmt.Printf("%s‚ùå Aucun remote configur√©%s\n", ColorRed, ColorReset)
		fmt.Println()
		return
	}

	// Extraire le remote principal (g√©n√©ralement origin)
	originURL := ""
	remoteLines := strings.Split(remotes, "\n")
	for _, line := range remoteLines {
		if strings.Contains(line, "origin") && strings.Contains(line, "(fetch)") {
			parts := strings.Fields(line)
			if len(parts) >= 2 {
				originURL = parts[1]
			}
			break
		}
	}

	if originURL != "" {
		fmt.Printf("%süåê Remote principal:%s %s\n", ColorBlue, ColorReset, originURL)
	}

	// V√©rifier l'√©tat de synchronisation (commits en avance/retard)
	// Effectuer un fetch silencieux pour s'assurer que les informations sont √† jour
	gm.runGitCommand("fetch", "origin")
	ahead, _ := gm.runGitCommand("rev-list", "--count", "@{u}..HEAD")
	behind, _ := gm.runGitCommand("rev-list", "--count", "HEAD..@{u}")

	if ahead != "" && ahead != "0" {
		fmt.Printf("%süì§ Commits √† pusher:%s %s commit(s)\n", ColorYellow, ColorReset, ahead)
	}
	if behind != "" && behind != "0" {
		fmt.Printf("%süì• Commits √† r√©cup√©rer:%s %s commit(s)\n", ColorYellow, ColorReset, behind)
	}

	if (ahead == "" || ahead == "0") && (behind == "" || behind == "0") {
		fmt.Printf("%s‚úÖ Branche synchronis√©e avec le remote%s\n", ColorGreen, ColorReset)
	}

	// Derni√®re synchronisation
	lastFetch, _ := gm.runGitCommand("log", "-1", "--pretty=format:%ar", "FETCH_HEAD")
	if lastFetch != "" {
		fmt.Printf("%süïê Dernier fetch:%s %s\n", ColorCyan, ColorReset, lastFetch)
	}

	fmt.Println()
}

// Activit√© r√©cente du d√©p√¥t
func (gm *GitManager) showRecentActivity() {
	fmt.Printf("%s%süìà ACTIVIT√â R√âCENTE%s\n", ColorBold, ColorBlue, ColorReset)

	// Derniers commits (3 derniers)
	recentCommits, _ := gm.runGitCommand("log", "-3", "--pretty=format:%C(yellow)%h%C(reset) %s %C(cyan)(%an, %ar)%C(reset)")
	if recentCommits != "" {
		fmt.Printf("%süì¶ Derniers commits:%s\n", ColorGreen, ColorReset)
		lines := strings.Split(recentCommits, "\n")
		for _, line := range lines {
			if line != "" {
				fmt.Printf("   %s\n", line)
			}
		}
	}

	// Activit√© des contributeurs (si plusieurs contributeurs)
	contributors, _ := gm.runGitCommand("shortlog", "-sn", "--since=1.week.ago")
	if contributors != "" {
		contributorLines := strings.Split(strings.TrimSpace(contributors), "\n")
		if len(contributorLines) > 1 {
			fmt.Printf("%süë• Activit√© cette semaine:%s\n", ColorCyan, ColorReset)
			for i, line := range contributorLines {
				if i < 3 && line != "" { // Top 3 contributeurs
					fmt.Printf("   %s\n", line)
				}
			}
		}
	}

	fmt.Println()
}

// Suggestions intelligentes bas√©es sur l'√©tat du d√©p√¥t
func (gm *GitManager) showIntelligentSuggestions() {
	fmt.Printf("%s%süí° SUGGESTIONS INTELLIGENTES%s\n", ColorBold, ColorYellow, ColorReset)

	status := gm.getGitStatus()
	staged, _ := gm.runGitCommand("diff", "--cached", "--name-only")
	currentBranch := gm.getCurrentBranch()
	ahead, _ := gm.runGitCommand("rev-list", "--count", "@{u}..HEAD")
	behind, _ := gm.runGitCommand("rev-list", "--count", "HEAD..@{u}")

	suggestions := []string{}

	// Suggestions bas√©es sur l'√©tat des fichiers
	if status != "" && staged == "" {
		suggestions = append(suggestions, "üìÅ Des fichiers sont modifi√©s ‚Üí Tapez 'F' pour les ajouter au stage")
	}

	if staged != "" {
		suggestions = append(suggestions, "‚úÖ Des fichiers sont en stage ‚Üí Tapez 'C' pour cr√©er un commit")
	}

	// Suggestions bas√©es sur la branche
	if currentBranch == "main" || currentBranch == "master" {
		if status != "" || staged != "" {
			suggestions = append(suggestions, "‚ö†Ô∏è  Vous d√©veloppez sur la branche principale ‚Üí Tapez 'B' pour cr√©er une feature branch")
		}
	}

	// Suggestions bas√©es sur la synchronisation
	if ahead != "" && ahead != "0" {
		suggestions = append(suggestions, "üì§ Vous avez des commits locaux ‚Üí Tapez 'R' puis '1' pour pusher")
	}

	if behind != "" && behind != "0" {
		suggestions = append(suggestions, "üì• Des commits sont disponibles sur le remote ‚Üí Tapez 'R' puis '2' pour puller")
	}

	// Suggestions g√©n√©rales
	if len(suggestions) == 0 {
		if status == "" && staged == "" {
			suggestions = append(suggestions, "üéâ Working directory clean ‚Üí Bon moment pour cr√©er une nouvelle branche")
			suggestions = append(suggestions, "üìä Tapez '8' pour voir les statistiques du projet")
		}
	}

	// Suggestions de bonnes pratiques
	lastCommitRelative, _ := gm.runGitCommand("log", "-1", "--pretty=format:%ar")
	if strings.Contains(lastCommitRelative, "day") || strings.Contains(lastCommitRelative, "week") || strings.Contains(lastCommitRelative, "month") || strings.Contains(lastCommitRelative, "year") {
		suggestions = append(suggestions, "üïê Dernier commit ancien ‚Üí Pensez √† faire des commits plus fr√©quents")
	}

	// Afficher les suggestions
	if len(suggestions) > 0 {
		for i, suggestion := range suggestions {
			if i < 4 { // Limiter √† 4 suggestions max
				fmt.Printf("   %s%s%s\n", ColorYellow, suggestion, ColorReset)
			}
		}
	} else {
		fmt.Printf("   %süéØ Tout semble en ordre! Continuez le bon travail.%s\n", ColorGreen, ColorReset)
	}

	fmt.Println()

	// Actions rapides recommand√©es
	fmt.Printf("%s%s‚ö° ACTIONS RAPIDES DISPONIBLES:%s\n", ColorBold, ColorCyan, ColorReset)
	fmt.Printf("   %sS%s = Actualiser ce statut  %sC%s = Commits  %sF%s = Fichiers  %sB%s = Branches  %sR%s = Remote\n",
		ColorCyan, ColorReset, ColorCyan, ColorReset, ColorCyan, ColorReset, ColorCyan, ColorReset, ColorCyan, ColorReset)
}

func (gm *GitManager) createBranchFromCommit() {
	// Afficher l'historique r√©cent pour aider l'utilisateur
	fmt.Printf("%süìà Derniers commits:%s\n", ColorBlue, ColorReset)
	recentCommits, _ := gm.runGitCommand("log", "--oneline", "--graph", "-10")
	fmt.Println(recentCommits)

	fmt.Printf("\n%sNom de la nouvelle branche: %s", ColorYellow, ColorReset)
	branchName := gm.getUserInput()

	if branchName == "" {
		fmt.Printf("%s‚ùå Nom de branche invalide!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	fmt.Printf("%sCommit de base (ex: HEAD~1 pour l'avant-dernier, ou hash sp√©cifique): %s", ColorYellow, ColorReset)
	baseCommit := gm.getUserInput()

	if baseCommit == "" {
		baseCommit = "HEAD" // Par d√©faut, le commit actuel
	}

	// Cr√©er la branche depuis le commit sp√©cifi√©
	output, err := gm.runGitCommand("checkout", "-b", branchName, baseCommit)
	if err != nil {
		fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
	} else {
		fmt.Printf("%s‚úÖ Branche '%s' cr√©√©e depuis le commit %s!%s\n", ColorGreen, branchName, baseCommit, ColorReset)

		// Afficher o√π on se trouve maintenant
		currentBranch := gm.getCurrentBranch()
		lastCommit, _ := gm.runGitCommand("log", "-1", "--pretty=format:%h - %s")
		fmt.Printf("%süìç Vous √™tes maintenant sur la branche '%s'%s\n", ColorCyan, currentBranch, ColorReset)
		fmt.Printf("%süì¶ Dernier commit: %s%s\n", ColorBlue, lastCommit, ColorReset)
	}
	gm.pause()
}

func (gm *GitManager) handleBranchManagement() {
	if !gm.isGitRepo() {
		fmt.Printf("%s‚ùå Ce r√©pertoire n'est pas un d√©p√¥t Git!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	for {
		gm.clearScreen()
		fmt.Printf("%s%süåø GESTION DES BRANCHES%s\n", ColorBold, ColorGreen, ColorReset)
		fmt.Println(strings.Repeat("‚ïê", 30))

		branches, _ := gm.runGitCommand("branch", "-v")
		fmt.Printf("%sBranches locales:%s\n", ColorBlue, ColorReset)
		fmt.Println(branches)

		fmt.Println("\n1. Cr√©er une nouvelle branche")
		fmt.Println("2. Cr√©er une branche depuis un commit sp√©cifique") // NOUVELLE OPTION
		fmt.Println("3. Changer de branche")
		fmt.Println("4. Supprimer une branche")
		fmt.Println("5. Renommer une branche")
		fmt.Println("6. Merger une branche")
		fmt.Println("7. Voir les branches remote")
		fmt.Println("0. Retour au menu principal")

		fmt.Printf("\n%sChoisissez une option: %s", ColorYellow, ColorReset)
		choice := gm.getUserInput()

		switch choice {
		case "1":
			gm.createBranch()
		case "2":
			gm.createBranchFromCommit() // NOUVELLE FONCTION
		case "3":
			gm.switchBranch()
		case "4":
			gm.deleteBranch()
		case "5":
			gm.renameBranch()
		case "6":
			gm.mergeBranch()
		case "7":
			gm.showRemoteBranches()
		case "0":
			return
		default:
			fmt.Printf("%s‚ùå Option invalide!%s\n", ColorRed, ColorReset)
			gm.pause()
		}
	}
}

func (gm *GitManager) handleCommitManagement() {
	if !gm.isGitRepo() {
		fmt.Printf("%s‚ùå Ce r√©pertoire n'est pas un d√©p√¥t Git!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	for {
		gm.clearScreen()
		fmt.Printf("%s%süì¶ GESTION DES COMMITS%s\n", ColorBold, ColorGreen, ColorReset)
		fmt.Println(strings.Repeat("‚ïê", 30))

		fmt.Println("1. Faire un commit")
		fmt.Println("2. Voir l'historique des commits")
		fmt.Println("3. Voir les d√©tails d'un commit")
		fmt.Println("4. Modifier le dernier commit (amend)")
		fmt.Println("5. Reset / Revert")
		fmt.Println("6. Chercher dans les commits")
		fmt.Println("0. Retour au menu principal")

		fmt.Printf("\n%sChoisissez une option: %s", ColorYellow, ColorReset)
		choice := gm.getUserInput()

		switch choice {
		case "1":
			gm.makeCommit()
		case "2":
			gm.showDetailedHistory()
		case "3":
			gm.showCommitDetails()
		case "4":
			gm.amendCommit()
		case "5":
			gm.handleResetRevert()
		case "6":
			gm.searchHistory()
		case "0":
			return
		default:
			fmt.Printf("%s‚ùå Option invalide!%s\n", ColorRed, ColorReset)
			gm.pause()
		}
	}
}

func (gm *GitManager) handleRemoteManagement() {
	if !gm.isGitRepo() {
		fmt.Printf("%s‚ùå Ce r√©pertoire n'est pas un d√©p√¥t Git!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	for {
		gm.clearScreen()
		fmt.Printf("%s%süîÑ GESTION DES REMOTES%s\n", ColorBold, ColorPurple, ColorReset)
		fmt.Println(strings.Repeat("‚ïê", 30))

		remotes, _ := gm.runGitCommand("remote", "-v")
		if remotes != "" {
			fmt.Printf("%sRemotes configur√©s:%s\n", ColorBlue, ColorReset)
			fmt.Println(remotes)
		} else {
			fmt.Printf("%sAucun remote configur√©.%s\n", ColorYellow, ColorReset)
		}

		fmt.Println("\n1. Ajouter un remote")
		fmt.Println("2. Supprimer un remote")
		fmt.Println("3. Renommer un remote")
		fmt.Println("4. Fetch depuis un remote")
		fmt.Println("5. Pull depuis un remote")
		fmt.Println("6. Push vers un remote")
		fmt.Println("0. Retour au menu principal")

		fmt.Printf("\n%sChoisissez une option: %s", ColorYellow, ColorReset)
		choice := gm.getUserInput()

		switch choice {
		case "1":
			gm.addRemote()
		case "2":
			gm.removeRemote()
		case "3":
			gm.renameRemote()
		case "4":
			gm.fetchFromRemote()
		case "5":
			gm.pullFromRemote()
		case "6":
			gm.pushToRemote()
		case "0":
			return
		default:
			fmt.Printf("%s‚ùå Option invalide!%s\n", ColorRed, ColorReset)
			gm.pause()
		}
	}
}

func (gm *GitManager) handleFileManagement() {
	if !gm.isGitRepo() {
		fmt.Printf("%s‚ùå Ce r√©pertoire n'est pas un d√©p√¥t Git!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	for {
		gm.clearScreen()
		fmt.Printf("%s%süìÅ GESTION DES FICHIERS%s\n", ColorBold, ColorGreen, ColorReset)
		fmt.Println(strings.Repeat("‚ïê", 30))

		fmt.Println("1. Ajouter des fichiers (add)")
		fmt.Println("2. Retirer des fichiers du staging (reset)")
		fmt.Println("3. Voir les diff√©rences (diff)")
		fmt.Println("4. G√©rer .gitignore")
		fmt.Println("5. Restaurer des fichiers (checkout)")
		fmt.Println("6. Ne plus tracker des fichiers (rm)")
		fmt.Println("0. Retour au menu principal")

		fmt.Printf("\n%sChoisissez une option: %s", ColorYellow, ColorReset)
		choice := gm.getUserInput()

		switch choice {
		case "1":
			gm.addFiles()
		case "2":
			gm.unstageFiles()
		case "3":
			gm.showDiff()
		case "4":
			gm.manageGitignore()
		case "5":
			gm.restoreFiles()
		case "6":
			gm.untrackFiles()
		case "0":
			return
		default:
			fmt.Printf("%s‚ùå Option invalide!%s\n", ColorRed, ColorReset)
			gm.pause()
		}
	}
}

func (gm *GitManager) handleTagManagement() {
	if !gm.isGitRepo() {
		fmt.Printf("%s‚ùå Ce r√©pertoire n'est pas un d√©p√¥t Git!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	for {
		gm.clearScreen()
		fmt.Printf("%s%süè∑Ô∏è  GESTION DES TAGS%s\n", ColorBold, ColorGreen, ColorReset)
		fmt.Println(strings.Repeat("‚ïê", 25))

		tags, _ := gm.runGitCommand("tag", "-l")
		if tags != "" {
			fmt.Printf("%süè∑Ô∏è  Tags existants:%s\n", ColorBlue, ColorReset)
			fmt.Println(tags)
			fmt.Println()
		}

		fmt.Println("1. Cr√©er un tag")
		fmt.Println("2. Cr√©er un tag annot√©")
		fmt.Println("3. Supprimer un tag")
		fmt.Println("4. Voir les d√©tails d'un tag")
		fmt.Println("5. Lister tous les tags")
		fmt.Println("0. Retour au menu principal")

		fmt.Printf("\n%sChoisissez une option: %s", ColorYellow, ColorReset)
		choice := gm.getUserInput()

		switch choice {
		case "1":
			gm.createTag()
		case "2":
			gm.createAnnotatedTag()
		case "3":
			gm.deleteTag()
		case "4":
			gm.showTagDetails()
		case "5":
			gm.listTags()
		case "0":
			return
		default:
			fmt.Printf("%s‚ùå Option invalide!%s\n", ColorRed, ColorReset)
			gm.pause()
		}
	}
}

func (gm *GitManager) handleStashManagement() {
	if !gm.isGitRepo() {
		fmt.Printf("%s‚ùå Ce r√©pertoire n'est pas un d√©p√¥t Git!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	for {
		gm.clearScreen()
		fmt.Printf("%s%süóÇÔ∏è  GESTION DES STASH%s\n", ColorBold, ColorGreen, ColorReset)
		fmt.Println(strings.Repeat("‚ïê", 25))

		stashes, _ := gm.runGitCommand("stash", "list")
		if stashes != "" {
			fmt.Printf("%süóÇÔ∏è  Stashes existants:%s\n", ColorBlue, ColorReset)
			fmt.Println(stashes)
			fmt.Println()
		}

		fmt.Println("1. Cr√©er un stash")
		fmt.Println("2. Appliquer un stash")
		fmt.Println("3. Voir le contenu d'un stash")
		fmt.Println("4. Supprimer un stash")
		fmt.Println("5. Supprimer tous les stashes")
		fmt.Println("6. Cr√©er une branche depuis un stash")
		fmt.Println("0. Retour au menu principal")

		fmt.Printf("\n%sChoisissez une option: %s", ColorYellow, ColorReset)
		choice := gm.getUserInput()

		switch choice {
		case "1":
			gm.createStash()
		case "2":
			gm.applyStash()
		case "3":
			gm.showStash()
		case "4":
			gm.dropStash()
		case "5":
			gm.clearStashes()
		case "6":
			gm.stashToBranch()
		case "0":
			return
		default:
			fmt.Printf("%s‚ùå Option invalide!%s\n", ColorRed, ColorReset)
			gm.pause()
		}
	}
}

func (gm *GitManager) handleStatistics() {
	if !gm.isGitRepo() {
		fmt.Printf("%s‚ùå Ce r√©pertoire n'est pas un d√©p√¥t Git!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	for {
		gm.clearScreen()
		fmt.Printf("%s%süìà STATISTIQUES ET LOGS%s\n", ColorBold, ColorGreen, ColorReset)
		fmt.Println(strings.Repeat("‚ïê", 30))

		fmt.Println("1. Statistiques g√©n√©rales")
		fmt.Println("2. Contributeurs et activit√©")
		fmt.Println("3. Historique d√©taill√©")
		fmt.Println("4. Graphique des branches")
		fmt.Println("5. Arbre des branches")
		fmt.Println("6. VUE ARBRE COMPL√àTE (tous commits & branches)") // NOUVELLE OPTION
		fmt.Println("7. Statistiques par fichier")
		fmt.Println("8. Bl√¢me d'un fichier")
		fmt.Println("9. Recherche dans l'historique")
		fmt.Println("0. Retour au menu principal")

		fmt.Printf("\n%sChoisissez une option: %s", ColorYellow, ColorReset)
		choice := gm.getUserInput()

		switch choice {
		case "1":
			gm.showGeneralStats()
		case "2":
			gm.showContributorStats()
		case "3":
			gm.showDetailedHistory()
		case "4":
			gm.showBranchGraph()
		case "5":
			gm.showBranchTree()
		case "6":
			gm.showCompleteTree() // NOUVELLE FONCTION
		case "7":
			gm.showFileStats()
		case "8":
			gm.showBlame()
		case "9":
			gm.searchHistory()
		case "0":
			return
		default:
			fmt.Printf("%s‚ùå Option invalide!%s\n", ColorRed, ColorReset)
			gm.pause()
		}
	}
}

func (gm *GitManager) handleTools() {
	if !gm.isGitRepo() {
		fmt.Printf("%s‚ùå Ce r√©pertoire n'est pas un d√©p√¥t Git!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	for {
		gm.clearScreen()
		fmt.Printf("%s%süîß OUTILS ET CONFIGURATION%s\n", ColorBold, ColorGreen, ColorReset)
		fmt.Println(strings.Repeat("‚ïê", 35))

		fmt.Println("1. Configuration Git")
		fmt.Println("2. Nettoyage du d√©p√¥t")
		fmt.Println("3. V√©rification du d√©p√¥t")
		fmt.Println("4. Hooks Git")
		fmt.Println("5. Aliases Git")
		fmt.Println("6. Sauvegarde/Archive")
		fmt.Println("0. Retour au menu principal")

		fmt.Printf("\n%sChoisissez une option: %s", ColorYellow, ColorReset)
		choice := gm.getUserInput()

		switch choice {
		case "1":
			gm.manageConfig()
		case "2":
			gm.cleanRepo()
		case "3":
			gm.checkRepo()
		case "4":
			gm.manageHooks()
		case "5":
			gm.manageAliases()
		case "6":
			gm.archiveRepo()
		case "0":
			return
		default:
			fmt.Printf("%s‚ùå Option invalide!%s\n", ColorRed, ColorReset)
			gm.pause()
		}
	}
}

// Branch Management
func (gm *GitManager) createBranch() {
	fmt.Printf("%sNom de la nouvelle branche: %s", ColorYellow, ColorReset)
	branchName := gm.getUserInput()

	if branchName == "" {
		fmt.Printf("%s‚ùå Nom de branche invalide!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	output, err := gm.runGitCommand("checkout", "-b", branchName)
	if err != nil {
		fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
	} else {
		fmt.Printf("%s‚úÖ Branche '%s' cr√©√©e et activ√©e!%s\n", ColorGreen, branchName, ColorReset)
	}
	gm.pause()
}

func (gm *GitManager) switchBranch() {
	branches, _ := gm.runGitCommand("branch")
	fmt.Printf("%sBranches disponibles:%s\n", ColorBlue, ColorReset)
	fmt.Println(branches)

	fmt.Printf("\n%sNom de la branche: %s", ColorYellow, ColorReset)
	branchName := gm.getUserInput()

	if branchName == "" {
		fmt.Printf("%s‚ùå Nom de branche invalide!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	output, err := gm.runGitCommand("checkout", branchName)
	if err != nil {
		fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
	} else {
		fmt.Printf("%s‚úÖ Branche '%s' activ√©e!%s\n", ColorGreen, branchName, ColorReset)
	}
	gm.pause()
}

func (gm *GitManager) deleteBranch() {
	branches, _ := gm.runGitCommand("branch")
	fmt.Printf("%sBranches disponibles:%s\n", ColorBlue, ColorReset)
	fmt.Println(branches)

	fmt.Printf("\n%sNom de la branche √† supprimer: %s", ColorYellow, ColorReset)
	branchName := gm.getUserInput()

	if branchName == "" {
		fmt.Printf("%s‚ùå Nom de branche invalide!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	fmt.Printf("%s‚ö†Ô∏è  √ätes-vous s√ªr de vouloir supprimer '%s'? (y/N): %s", ColorRed, branchName, ColorReset)
	confirm := gm.getUserInput()

	if strings.ToLower(confirm) == "y" {
		output, err := gm.runGitCommand("branch", "-d", branchName)
		if err != nil {
			fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
			fmt.Printf("%süí° Utilisez 'git branch -D %s' pour forcer la suppression%s\n", ColorYellow, branchName, ColorReset)
		} else {
			fmt.Printf("%s‚úÖ Branche '%s' supprim√©e!%s\n", ColorGreen, branchName, ColorReset)
		}
	}
	gm.pause()
}

func (gm *GitManager) renameBranch() {
	currentBranch := gm.getCurrentBranch()
	fmt.Printf("%sBranche actuelle: %s%s%s\n", ColorBlue, ColorCyan, currentBranch, ColorReset)

	fmt.Printf("%sNouveau nom: %s", ColorYellow, ColorReset)
	newName := gm.getUserInput()

	if newName == "" {
		fmt.Printf("%s‚ùå Nom invalide!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	output, err := gm.runGitCommand("branch", "-m", newName)
	if err != nil {
		fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
	} else {
		fmt.Printf("%s‚úÖ Branche renomm√©e de '%s' √† '%s'!%s\n", ColorGreen, currentBranch, newName, ColorReset)
	}
	gm.pause()
}

func (gm *GitManager) mergeBranch() {
	currentBranch := gm.getCurrentBranch()
	branches, _ := gm.runGitCommand("branch")

	fmt.Printf("%sBranche actuelle: %s%s%s\n", ColorBlue, ColorCyan, currentBranch, ColorReset)
	fmt.Printf("%sBranches disponibles:%s\n", ColorBlue, ColorReset)
	fmt.Println(branches)

	fmt.Printf("\n%sBranche √† merger dans '%s': %s", ColorYellow, currentBranch, ColorReset)
	branchName := gm.getUserInput()

	if branchName == "" {
		fmt.Printf("%s‚ùå Nom de branche invalide!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	output, err := gm.runGitCommand("merge", branchName)
	if err != nil {
		fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
	} else {
		fmt.Printf("%s‚úÖ Branche '%s' merg√©e dans '%s'!%s\n", ColorGreen, branchName, currentBranch, ColorReset)
	}
	gm.pause()
}

func (gm *GitManager) showRemoteBranches() {
	output, err := gm.runGitCommand("branch", "-r")
	if err != nil {
		fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
	} else {
		fmt.Printf("%süåê Branches remote:%s\n", ColorCyan, ColorReset)
		fmt.Println(output)
	}
	gm.pause()
}

// Commit Management
func (gm *GitManager) makeCommit() {
	staged, _ := gm.runGitCommand("diff", "--cached", "--name-only")
	if staged == "" {
		fmt.Printf("%sAucun fichier en stage. Voulez-vous ajouter des fichiers? (y/N): %s", ColorYellow, ColorReset)
		choice := gm.getUserInput()
		if strings.ToLower(choice) == "y" {
			gm.addFiles()
			staged, _ = gm.runGitCommand("diff", "--cached", "--name-only")
			if staged == "" {
				fmt.Printf("%s‚ùå Aucun fichier en stage apr√®s ajout. Annulation du commit.%s\n", ColorRed, ColorReset)
				gm.pause()
				return
			}
		} else {
			gm.pause()
			return
		}
	}

	fmt.Printf("%sMessage de commit: %s", ColorYellow, ColorReset)
	message := gm.getUserInput()

	if message == "" {
		fmt.Printf("%s‚ùå Message de commit requis!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	output, err := gm.runGitCommand("commit", "-m", message)
	if err != nil {
		fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
	} else {
		fmt.Printf("%s‚úÖ Commit cr√©√©!%s\n", ColorGreen, ColorReset)
		fmt.Println(output)
	}
	gm.pause()
}

func (gm *GitManager) showCommitDetails() {
	fmt.Printf("%sHash du commit (vide pour le dernier): %s", ColorYellow, ColorReset)
	commitHash := gm.getUserInput()

	var output string
	var err error

	// Ajout de l'option --color=always pour forcer la coloration
	if commitHash == "" {
		output, err = gm.runGitCommand("show", "--color=always", "HEAD")
	} else {
		output, err = gm.runGitCommand("show", "--color=always", commitHash)
	}

	if err != nil {
		fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
	} else {
		fmt.Println(output)
	}
	gm.pause()
}

func (gm *GitManager) amendCommit() {
	fmt.Printf("%sVoulez-vous modifier le message du dernier commit? (y/N): %s", ColorYellow, ColorReset)
	choice := gm.getUserInput()
	var output string
	var err error

	if strings.ToLower(choice) == "y" {
		fmt.Printf("%sNouveau message de commit: %s", ColorYellow, ColorReset)
		newMessage := gm.getUserInput()
		if newMessage == "" {
			fmt.Printf("%s‚ùå Message de commit requis!%s\n", ColorRed, ColorReset)
			gm.pause()
			return
		}
		output, err = gm.runGitCommand("commit", "--amend", "-m", newMessage)
	} else {
		output, err = gm.runGitCommand("commit", "--amend", "--no-edit")
	}

	if err != nil {
		fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
	} else {
		fmt.Printf("%s‚úÖ Dernier commit modifi√©!%s\n", ColorGreen, ColorReset)
	}
	gm.pause()
}

func (gm *GitManager) handleResetRevert() {
	for {
		gm.clearScreen()
		fmt.Printf("%s%süîÑ RESET / REVERT%s\n", ColorBold, ColorRed, ColorReset)
		fmt.Println(strings.Repeat("‚ïê", 30))
		fmt.Println("1. Reset (d√©placer HEAD)")
		fmt.Println("2. Revert (cr√©er un commit d'annulation)")
		fmt.Println("0. Retour")

		fmt.Printf("\n%sChoisissez une option: %s", ColorYellow, ColorReset)
		choice := gm.getUserInput()

		switch choice {
		case "1":
			gm.handleReset()
		case "2":
			gm.handleRevert()
		case "0":
			return
		default:
			fmt.Printf("%s‚ùå Option invalide!%s\n", ColorRed, ColorReset)
			gm.pause()
		}
	}
}

func (gm *GitManager) handleReset() {
	fmt.Printf("%sCommit cible (ex: HEAD~1, hash): %s", ColorYellow, ColorReset)
	target := gm.getUserInput()
	if target == "" {
		fmt.Printf("%s‚ùå Cible requise!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	fmt.Println("Types de reset:")
	fmt.Println("1. --soft (ne touche pas √† l'index ni √† l'arbre de travail)")
	fmt.Println("2. --mixed (d√©faut, reset l'index mais pas l'arbre de travail)")
	fmt.Println("3. --hard (ATTENTION: perd les modifications locales)")

	fmt.Printf("\n%sChoisissez un type de reset (d√©faut 2): %s", ColorYellow, ColorReset)
	choice := gm.getUserInput()

	var resetType string
	switch choice {
	case "1":
		resetType = "--soft"
	case "3":
		fmt.Printf("%s‚ö†Ô∏è  √ätes-vous s√ªr de vouloir faire un reset --hard? (y/N): %s", ColorRed, ColorReset)
		confirm := gm.getUserInput()
		if strings.ToLower(confirm) != "y" {
			gm.pause()
			return
		}
		resetType = "--hard"
	default:
		resetType = "--mixed"
	}

	output, err := gm.runGitCommand("reset", resetType, target)
	if err != nil {
		fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
	} else {
		fmt.Printf("%s‚úÖ Reset effectu√©!%s\n", ColorGreen, ColorReset)
		fmt.Println(output)
	}
	gm.pause()
}

func (gm *GitManager) handleRevert() {
	fmt.Printf("%sCommit √† annuler (revert): %s", ColorYellow, ColorReset)
	target := gm.getUserInput()
	if target == "" {
		fmt.Printf("%s‚ùå Cible requise!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	output, err := gm.runGitCommand("revert", target)
	if err != nil {
		fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
	} else {
		fmt.Printf("%s‚úÖ Revert effectu√©!%s\n", ColorGreen, ColorReset)
		fmt.Println(output)
	}
	gm.pause()
}

// Remote Management
func (gm *GitManager) addRemote() {
	fmt.Printf("%sNom du remote (ex: origin): %s", ColorYellow, ColorReset)
	name := gm.getUserInput()
	fmt.Printf("%sURL du remote: %s", ColorYellow, ColorReset)
	url := gm.getUserInput()

	if name == "" || url == "" {
		fmt.Printf("%s‚ùå Nom et URL sont requis!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	output, err := gm.runGitCommand("remote", "add", name, url)
	if err != nil {
		fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
	} else {
		fmt.Printf("%s‚úÖ Remote '%s' ajout√©!%s\n", ColorGreen, name, ColorReset)
	}
	gm.pause()
}

func (gm *GitManager) removeRemote() {
	fmt.Printf("%sNom du remote √† supprimer: %s", ColorYellow, ColorReset)
	name := gm.getUserInput()
	if name == "" {
		gm.pause()
		return
	}

	output, err := gm.runGitCommand("remote", "remove", name)
	if err != nil {
		fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
	} else {
		fmt.Printf("%s‚úÖ Remote '%s' supprim√©!%s\n", ColorGreen, name, ColorReset)
	}
	gm.pause()
}

func (gm *GitManager) renameRemote() {
	fmt.Printf("%sAncien nom du remote: %s", ColorYellow, ColorReset)
	oldName := gm.getUserInput()
	fmt.Printf("%sNouveau nom du remote: %s", ColorYellow, ColorReset)
	newName := gm.getUserInput()

	if oldName == "" || newName == "" {
		fmt.Printf("%s‚ùå Les deux noms sont requis!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	output, err := gm.runGitCommand("remote", "rename", oldName, newName)
	if err != nil {
		fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
	} else {
		fmt.Printf("%s‚úÖ Remote renomm√© de '%s' √† '%s'!%s\n", ColorGreen, oldName, newName, ColorReset)
	}
	gm.pause()
}

func (gm *GitManager) fetchFromRemote() {
	fmt.Printf("%sNom du remote (laisser vide pour 'all'): %s", ColorYellow, ColorReset)
	remote := gm.getUserInput()

	var output string
	var err error
	if remote == "" {
		output, err = gm.runGitCommand("fetch", "--all", "--prune")
	} else {
		output, err = gm.runGitCommand("fetch", remote, "--prune")
	}

	if err != nil {
		fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
	} else {
		fmt.Printf("%s‚úÖ Fetch termin√©!%s\n", ColorGreen, ColorReset)
		fmt.Println(output)
	}
	gm.pause()
}

func (gm *GitManager) pullFromRemote() {
	fmt.Printf("%sRemote (d√©faut 'origin'): %s", ColorYellow, ColorReset)
	remote := gm.getUserInput()
	if remote == "" {
		remote = "origin"
	}

	currentBranch := gm.getCurrentBranch()
	fmt.Printf("%sBranche (d√©faut '%s'): %s", ColorYellow, currentBranch, ColorReset)
	branch := gm.getUserInput()
	if branch == "" {
		branch = currentBranch
	}

	output, err := gm.runGitCommand("pull", remote, branch)
	if err != nil {
		fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
	} else {
		fmt.Printf("%s‚úÖ Pull termin√©!%s\n", ColorGreen, ColorReset)
		fmt.Println(output)
	}
	gm.pause()
}

func (gm *GitManager) pushToRemote() {
	fmt.Printf("%sRemote (d√©faut 'origin'): %s", ColorYellow, ColorReset)
	remote := gm.getUserInput()
	if remote == "" {
		remote = "origin"
	}

	currentBranch := gm.getCurrentBranch()
	fmt.Printf("%sBranche (d√©faut '%s'): %s", ColorYellow, currentBranch, ColorReset)
	branch := gm.getUserInput()
	if branch == "" {
		branch = currentBranch
	}

	fmt.Printf("%sForcer le push? (y/N): %s", ColorRed, ColorReset)
	force := gm.getUserInput()

	args := []string{"push", remote, branch}
	if strings.ToLower(force) == "y" {
		args = append(args, "--force")
	}

	output, err := gm.runGitCommand(args...)
	if err != nil {
		fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
	} else {
		fmt.Printf("%s‚úÖ Push termin√©!%s\n", ColorGreen, ColorReset)
		fmt.Println(output)
	}
	gm.pause()
}

// File Management
func (gm *GitManager) printFileStatus(line string) {
	if len(line) < 3 {
		return
	}

	status := line[:2]
	file := line[3:]

	switch status {
	case "M ":
		fmt.Printf("%s  M  %s%s (modifi√©, en stage)\n", ColorGreen, file, ColorReset)
	case " M":
		fmt.Printf("%s  M  %s%s (modifi√©)\n", ColorYellow, file, ColorReset)
	case "A ":
		fmt.Printf("%s  A  %s%s (ajout√©)\n", ColorGreen, file, ColorReset)
	case "D ":
		fmt.Printf("%s  D  %s%s (supprim√©)\n", ColorRed, file, ColorReset)
	case "??":
		fmt.Printf("%s  ?  %s%s (non suivi)\n", ColorRed, file, ColorReset)
	case "R ":
		fmt.Printf("%s  R  %s%s (renomm√©)\n", ColorCyan, file, ColorReset)
	default:
		fmt.Printf("%s  %s  %s%s\n", ColorWhite, status, file, ColorReset)
	}
}

func (gm *GitManager) addFiles() {
	status := gm.getGitStatus()
	if status == "" {
		fmt.Printf("%s‚úÖ Aucun fichier √† ajouter!%s\n", ColorGreen, ColorReset)
		gm.pause()
		return
	}

	fmt.Printf("%süìÅ Fichiers disponibles:%s\n", ColorYellow, ColorReset)
	lines := strings.Split(status, "\n")
	for _, line := range lines {
		if line != "" {
			gm.printFileStatus(line)
		}
	}

	fmt.Println("\n1. Ajouter tous les fichiers")
	fmt.Println("2. Ajouter des fichiers sp√©cifiques")
	fmt.Println("0. Annuler")

	fmt.Printf("\n%sChoisissez une option: %s", ColorYellow, ColorReset)
	choice := gm.getUserInput()

	switch choice {
	case "1":
		output, err := gm.runGitCommand("add", ".")
		if err != nil {
			fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
		} else {
			fmt.Printf("%s‚úÖ Tous les fichiers ajout√©s!%s\n", ColorGreen, ColorReset)
		}
	case "2":
		fmt.Printf("%sFichiers √† ajouter (s√©par√©s par des espaces): %s", ColorYellow, ColorReset)
		files := gm.getUserInput()
		if files != "" {
			fileList := strings.Fields(files)
			for _, file := range fileList {
				output, err := gm.runGitCommand("add", file)
				if err != nil {
					fmt.Printf("%s‚ùå Erreur avec '%s': %s%s\n", ColorRed, file, output, ColorReset)
				} else {
					fmt.Printf("%s‚úÖ '%s' ajout√©!%s\n", ColorGreen, file, ColorReset)
				}
			}
		}
	}
	gm.pause()
}

func (gm *GitManager) unstageFiles() {
	staged, _ := gm.runGitCommand("diff", "--cached", "--name-only")
	if staged == "" {
		fmt.Printf("%s‚úÖ Aucun fichier en stage!%s\n", ColorGreen, ColorReset)
		gm.pause()
		return
	}

	fmt.Printf("%süìÅ Fichiers en stage:%s\n", ColorYellow, ColorReset)
	fmt.Println(staged)

	fmt.Println("\n1. Retirer tous les fichiers du staging")
	fmt.Println("2. Retirer des fichiers sp√©cifiques")
	fmt.Println("0. Annuler")

	fmt.Printf("\n%sChoisissez une option: %s", ColorYellow, ColorReset)
	choice := gm.getUserInput()

	switch choice {
	case "1":
		output, err := gm.runGitCommand("reset", "HEAD")
		if err != nil {
			fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
		} else {
			fmt.Printf("%s‚úÖ Tous les fichiers retir√©s du staging!%s\n", ColorGreen, ColorReset)
		}
	case "2":
		fmt.Printf("%sFichiers √† retirer (s√©par√©s par des espaces): %s", ColorYellow, ColorReset)
		files := gm.getUserInput()
		if files != "" {
			fileList := strings.Fields(files)
			for _, file := range fileList {
				output, err := gm.runGitCommand("reset", "HEAD", "--", file)
				if err != nil {
					fmt.Printf("%s‚ùå Erreur avec '%s': %s%s\n", ColorRed, file, output, ColorReset)
				} else {
					fmt.Printf("%s‚úÖ '%s' retir√© du staging!%s\n", ColorGreen, file, ColorReset)
				}
			}
		}
	}
	gm.pause()
}

func (gm *GitManager) showDiff() {
	for {
		gm.clearScreen()
		fmt.Println("1. Voir les changements non stag√©s")
		fmt.Println("2. Voir les changements stag√©s")
		fmt.Println("3. Voir les changements d'un fichier sp√©cifique")
		fmt.Println("4. Comparer deux commits")
		fmt.Println("0. Retour")

		fmt.Printf("\n%sChoisissez une option: %s", ColorYellow, ColorReset)
		choice := gm.getUserInput()

		switch choice {
		case "1":
			// Ajout de l'option --color=always pour forcer la coloration
			output, _ := gm.runGitCommand("diff", "--color=always")
			if output == "" {
				fmt.Printf("%s‚úÖ Aucun changement non stag√©!%s\n", ColorGreen, ColorReset)
			} else {
				fmt.Printf("%süìä Changements non stag√©s:%s\n", ColorBlue, ColorReset)
				fmt.Println(output)
			}
			gm.pause()
		case "2":
			// Ajout de l'option --color=always pour forcer la coloration
			output, _ := gm.runGitCommand("diff", "--cached", "--color=always")
			if output == "" {
				fmt.Printf("%s‚úÖ Aucun changement stag√©!%s\n", ColorGreen, ColorReset)
			} else {
				fmt.Printf("%süìä Changements stag√©s:%s\n", ColorBlue, ColorReset)
				fmt.Println(output)
			}
			gm.pause()
		case "3":
			fmt.Printf("%sNom du fichier: %s", ColorYellow, ColorReset)
			filename := gm.getUserInput()
			if filename != "" {
				// Ajout de l'option --color=always pour forcer la coloration
				output, err := gm.runGitCommand("diff", "--color=always", "--", filename)
				if err != nil {
					fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
				} else {
					fmt.Printf("%süìä Changements dans '%s':%s\n", ColorBlue, filename, ColorReset)
					fmt.Println(output)
				}
			}
			gm.pause()
		case "4":
			fmt.Printf("%sPremier commit: %s", ColorYellow, ColorReset)
			commit1 := gm.getUserInput()
			fmt.Printf("%sDeuxi√®me commit: %s", ColorYellow, ColorReset)
			commit2 := gm.getUserInput()

			if commit1 != "" && commit2 != "" {
				// Ajout de l'option --color=always pour forcer la coloration
				output, err := gm.runGitCommand("diff", "--color=always", commit1, commit2)
				if err != nil {
					fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
				} else {
					fmt.Printf("%süìä Diff√©rences entre '%s' et '%s':%s\n", ColorBlue, commit1, commit2, ColorReset)
					fmt.Println(output)
				}
			}
			gm.pause()
		case "0":
			return
		default:
			fmt.Printf("%s‚ùå Option invalide!%s\n", ColorRed, ColorReset)
			gm.pause()
		}
	}
}

func (gm *GitManager) manageGitignore() {
	gitignorePath := filepath.Join(gm.currentPath, ".gitignore")

	for {
		gm.clearScreen()
		fmt.Println("1. Voir le contenu de .gitignore")
		fmt.Println("2. Ajouter des patterns √† .gitignore")
		fmt.Println("3. Cr√©er un .gitignore basique")
		fmt.Println("0. Retour")

		fmt.Printf("\n%sChoisissez une option: %s", ColorYellow, ColorReset)
		choice := gm.getUserInput()

		switch choice {
		case "1":
			content, err := os.ReadFile(gitignorePath)
			if err != nil {
				fmt.Printf("%s‚ùå Fichier .gitignore introuvable ou erreur de lecture%s\n", ColorRed, ColorReset)
			} else {
				fmt.Printf("%süìÑ Contenu de .gitignore:%s\n", ColorBlue, ColorReset)
				fmt.Println(string(content))
			}
			gm.pause()
		case "2":
			fmt.Printf("%sPatterns √† ajouter (un par ligne, ligne vide pour terminer):%s\n", ColorYellow, ColorReset)
			var patterns []string
			for {
				fmt.Print("> ")
				line := gm.getUserInput()
				if line == "" {
					break
				}
				patterns = append(patterns, line)
			}

			if len(patterns) > 0 {
				file, err := os.OpenFile(gitignorePath, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
				if err != nil {
					fmt.Printf("%s‚ùå Erreur lors de l'ouverture du fichier: %s%s\n", ColorRed, err.Error(), ColorReset)
				} else {
					defer file.Close()
					for _, pattern := range patterns {
						_, _ = file.WriteString(pattern + "\n")
					}
					fmt.Printf("%s‚úÖ Patterns ajout√©s √† .gitignore!%s\n", ColorGreen, ColorReset)
				}
			}
			gm.pause()
		case "3":
			basicGitignore := `# Fichiers de compilation
*.o
*.so
*.dylib
*.exe

# Fichiers de debug
*.dSYM/
*.pdb

# Fichiers temporaires
*.tmp
*.temp
*~
.DS_Store
Thumbs.db

# R√©pertoires de d√©pendances
node_modules/
vendor/

# Fichiers de configuration locale
.env
.env.local
config.local.*

# Logs
*.log
logs/

# Fichiers d'IDE
.vscode/
.idea/
*.swp
*.swo
`
			err := os.WriteFile(gitignorePath, []byte(basicGitignore), 0644)
			if err != nil {
				fmt.Printf("%s‚ùå Erreur lors de la cr√©ation: %s%s\n", ColorRed, err.Error(), ColorReset)
			} else {
				fmt.Printf("%s‚úÖ .gitignore basique cr√©√©!%s\n", ColorGreen, ColorReset)
			}
			gm.pause()
		case "0":
			return
		default:
			fmt.Printf("%s‚ùå Option invalide!%s\n", ColorRed, ColorReset)
			gm.pause()
		}
	}
}

func (gm *GitManager) restoreFiles() {
	status := gm.getGitStatus()
	if status == "" {
		fmt.Printf("%s‚úÖ Aucun fichier √† restaurer!%s\n", ColorGreen, ColorReset)
		gm.pause()
		return
	}

	fmt.Printf("%süìÅ Fichiers modifi√©s:%s\n", ColorYellow, ColorReset)
	lines := strings.Split(status, "\n")
	for _, line := range lines {
		if line != "" {
			gm.printFileStatus(line)
		}
	}

	fmt.Println("\n1. Restaurer tous les fichiers modifi√©s")
	fmt.Println("2. Restaurer des fichiers sp√©cifiques")
	fmt.Println("0. Annuler")

	fmt.Printf("\n%s‚ö†Ô∏è  ATTENTION: Cette action va perdre les modifications non commit√©es!%s\n", ColorRed, ColorReset)
	fmt.Printf("%sChoisissez une option: %s", ColorYellow, ColorReset)
	choice := gm.getUserInput()

	switch choice {
	case "1":
		fmt.Printf("%s√ätes-vous s√ªr? (y/N): %s", ColorRed, ColorReset)
		confirm := gm.getUserInput()
		if strings.ToLower(confirm) == "y" {
			output, err := gm.runGitCommand("checkout", "--", ".")
			if err != nil {
				fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
			} else {
				fmt.Printf("%s‚úÖ Tous les fichiers restaur√©s!%s\n", ColorGreen, ColorReset)
			}
		}
	case "2":
		fmt.Printf("%sFichiers √† restaurer (s√©par√©s par des espaces): %s", ColorYellow, ColorReset)
		files := gm.getUserInput()
		if files != "" {
			fmt.Printf("%s√ätes-vous s√ªr? (y/N): %s", ColorRed, ColorReset)
			confirm := gm.getUserInput()
			if strings.ToLower(confirm) == "y" {
				fileList := strings.Fields(files)
				for _, file := range fileList {
					output, err := gm.runGitCommand("checkout", "--", file)
					if err != nil {
						fmt.Printf("%s‚ùå Erreur avec '%s': %s%s\n", ColorRed, file, output, ColorReset)
					} else {
						fmt.Printf("%s‚úÖ '%s' restaur√©!%s\n", ColorGreen, file, ColorReset)
					}
				}
			}
		}
	}
	gm.pause()
}

func (gm *GitManager) untrackFiles() {
	fmt.Printf("%sFichiers √† ne plus tracker (s√©par√©s par des espaces): %s", ColorYellow, ColorReset)
	files := gm.getUserInput()

	if files != "" {
		fmt.Printf("%sGarder les fichiers localement? (Y/n): %s", ColorYellow, ColorReset)
		keep := gm.getUserInput()

		fileList := strings.Fields(files)
		for _, file := range fileList {
			var output string
			var err error

			if strings.ToLower(keep) == "n" {
				output, err = gm.runGitCommand("rm", file)
			} else {
				output, err = gm.runGitCommand("rm", "--cached", file)
			}

			if err != nil {
				fmt.Printf("%s‚ùå Erreur avec '%s': %s%s\n", ColorRed, file, output, ColorReset)
			} else {
				fmt.Printf("%s‚úÖ '%s' retir√© du tracking!%s\n", ColorGreen, file, ColorReset)
			}
		}
	}
	gm.pause()
}

// Tag Management
func (gm *GitManager) createTag() {
	fmt.Printf("%sNom du tag: %s", ColorYellow, ColorReset)
	tagName := gm.getUserInput()

	if tagName == "" {
		fmt.Printf("%s‚ùå Nom de tag requis!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	fmt.Printf("%sCommit √† tagger (vide pour HEAD): %s", ColorYellow, ColorReset)
	commit := gm.getUserInput()

	var output string
	var err error

	if commit == "" {
		output, err = gm.runGitCommand("tag", tagName)
	} else {
		output, err = gm.runGitCommand("tag", tagName, commit)
	}

	if err != nil {
		fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
	} else {
		fmt.Printf("%s‚úÖ Tag '%s' cr√©√©!%s\n", ColorGreen, tagName, ColorReset)
	}
	gm.pause()
}

func (gm *GitManager) createAnnotatedTag() {
	fmt.Printf("%sNom du tag: %s", ColorYellow, ColorReset)
	tagName := gm.getUserInput()

	if tagName == "" {
		fmt.Printf("%s‚ùå Nom de tag requis!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	fmt.Printf("%sMessage du tag: %s", ColorYellow, ColorReset)
	message := gm.getUserInput()

	if message == "" {
		fmt.Printf("%s‚ùå Message requis pour un tag annot√©!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	fmt.Printf("%sCommit √† tagger (vide pour HEAD): %s", ColorYellow, ColorReset)
	commit := gm.getUserInput()

	var output string
	var err error

	if commit == "" {
		output, err = gm.runGitCommand("tag", "-a", tagName, "-m", message)
	} else {
		output, err = gm.runGitCommand("tag", "-a", tagName, "-m", message, commit)
	}

	if err != nil {
		fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
	} else {
		fmt.Printf("%s‚úÖ Tag annot√© '%s' cr√©√©!%s\n", ColorGreen, tagName, ColorReset)
	}
	gm.pause()
}

func (gm *GitManager) deleteTag() {
	tags, _ := gm.runGitCommand("tag", "-l")
	if tags == "" {
		fmt.Printf("%s‚ùå Aucun tag √† supprimer!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	fmt.Printf("%süè∑Ô∏è  Tags disponibles:%s\n", ColorBlue, ColorReset)
	fmt.Println(tags)

	fmt.Printf("\n%sNom du tag √† supprimer: %s", ColorYellow, ColorReset)
	tagName := gm.getUserInput()

	if tagName == "" {
		gm.pause()
		return
	}

	fmt.Printf("%s‚ö†Ô∏è  √ätes-vous s√ªr de vouloir supprimer le tag '%s'? (y/N): %s", ColorRed, tagName, ColorReset)
	confirm := gm.getUserInput()

	if strings.ToLower(confirm) == "y" {
		output, err := gm.runGitCommand("tag", "-d", tagName)
		if err != nil {
			fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
		} else {
			fmt.Printf("%s‚úÖ Tag '%s' supprim√©!%s\n", ColorGreen, tagName, ColorReset)
		}
	}
	gm.pause()
}

func (gm *GitManager) showTagDetails() {
	fmt.Printf("%sNom du tag: %s", ColorYellow, ColorReset)
	tagName := gm.getUserInput()

	if tagName == "" {
		gm.pause()
		return
	}

	output, err := gm.runGitCommand("show", tagName)
	if err != nil {
		fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
	} else {
		fmt.Printf("%süè∑Ô∏è  D√©tails du tag '%s':%s\n", ColorBlue, tagName, ColorReset)
		fmt.Println(output)
	}
	gm.pause()
}

func (gm *GitManager) listTags() {
	output, err := gm.runGitCommand("tag", "-l", "--sort=-version:refname")
	if err != nil {
		fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
	} else {
		fmt.Printf("%süè∑Ô∏è  Tous les tags:%s\n", ColorBlue, ColorReset)
		if output == "" {
			fmt.Printf("%s‚ùå Aucun tag trouv√©%s\n", ColorRed, ColorReset)
		} else {
			fmt.Println(output)
		}
	}
	gm.pause()
}

// Stash Management
func (gm *GitManager) createStash() {
	status := gm.getGitStatus()
	if status == "" {
		fmt.Printf("%s‚úÖ Aucun changement √† stasher!%s\n", ColorGreen, ColorReset)
		gm.pause()
		return
	}

	fmt.Printf("%sMessage pour le stash (optionnel): %s", ColorYellow, ColorReset)
	message := gm.getUserInput()

	fmt.Println("\n1. Stash normal (fichiers track√©s)")
	fmt.Println("2. Stash avec fichiers non track√©s (-u)")
	fmt.Println("3. Stash avec tous les fichiers (-a)")
	fmt.Println("0. Annuler")

	fmt.Printf("\n%sChoisissez une option: %s", ColorYellow, ColorReset)
	choice := gm.getUserInput()

	var cmd []string
	if message != "" {
		cmd = []string{"stash", "push", "-m", message}
	} else {
		cmd = []string{"stash"}
	}

	switch choice {
	case "1":
		// default command
	case "2":
		cmd = append(cmd, "-u")
	case "3":
		cmd = append(cmd, "-a")
	case "0":
		return
	default:
		fmt.Printf("%s‚ùå Option invalide!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	output, err := gm.runGitCommand(cmd...)
	if err != nil {
		fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
	} else {
		fmt.Printf("%s‚úÖ Stash cr√©√©!%s\n", ColorGreen, ColorReset)
	}
	gm.pause()
}

func (gm *GitManager) applyStash() {
	stashes, _ := gm.runGitCommand("stash", "list")
	if stashes == "" {
		fmt.Printf("%s‚ùå Aucun stash disponible!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	fmt.Printf("%süóÇÔ∏è  Stashes disponibles:%s\n", ColorBlue, ColorReset)
	fmt.Println(stashes)

	fmt.Printf("\n%sIndex du stash √† appliquer (0 pour le plus r√©cent): %s", ColorYellow, ColorReset)
	indexStr := gm.getUserInput()

	index := 0
	if indexStr != "" {
		if i, err := strconv.Atoi(indexStr); err == nil {
			index = i
		}
	}

	fmt.Println("\n1. Appliquer et garder le stash (apply)")
	fmt.Println("2. Appliquer et supprimer le stash (pop)")
	fmt.Println("0. Annuler")

	fmt.Printf("\n%sChoisissez une option: %s", ColorYellow, ColorReset)
	choice := gm.getUserInput()

	var output string
	var err error
	stashRef := fmt.Sprintf("stash@{%d}", index)

	switch choice {
	case "1":
		output, err = gm.runGitCommand("stash", "apply", stashRef)
	case "2":
		output, err = gm.runGitCommand("stash", "pop", stashRef)
	case "0":
		return
	default:
		fmt.Printf("%s‚ùå Option invalide!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	if err != nil {
		fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
	} else {
		fmt.Printf("%s‚úÖ Stash appliqu√©!%s\n", ColorGreen, ColorReset)
	}
	gm.pause()
}

func (gm *GitManager) showStash() {
	stashes, _ := gm.runGitCommand("stash", "list")
	if stashes == "" {
		fmt.Printf("%s‚ùå Aucun stash disponible!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	fmt.Printf("%süóÇÔ∏è  Stashes disponibles:%s\n", ColorBlue, ColorReset)
	fmt.Println(stashes)

	fmt.Printf("\n%sIndex du stash √† voir (0 pour le plus r√©cent): %s", ColorYellow, ColorReset)
	indexStr := gm.getUserInput()

	index := 0
	if indexStr != "" {
		if i, err := strconv.Atoi(indexStr); err == nil {
			index = i
		}
	}

	stashRef := fmt.Sprintf("stash@{%d}", index)
	output, err := gm.runGitCommand("stash", "show", "-p", stashRef)
	if err != nil {
		fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
	} else {
		fmt.Printf("%süóÇÔ∏è  Contenu du stash %s:%s\n", ColorBlue, stashRef, ColorReset)
		fmt.Println(output)
	}
	gm.pause()
}

func (gm *GitManager) dropStash() {
	stashes, _ := gm.runGitCommand("stash", "list")
	if stashes == "" {
		fmt.Printf("%s‚ùå Aucun stash disponible!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	fmt.Printf("%süóÇÔ∏è  Stashes disponibles:%s\n", ColorBlue, ColorReset)
	fmt.Println(stashes)

	fmt.Printf("\n%sIndex du stash √† supprimer (0 pour le plus r√©cent): %s", ColorYellow, ColorReset)
	indexStr := gm.getUserInput()

	index := 0
	if indexStr != "" {
		if i, err := strconv.Atoi(indexStr); err == nil {
			index = i
		}
	}

	stashRef := fmt.Sprintf("stash@{%d}", index)

	fmt.Printf("%s‚ö†Ô∏è  √ätes-vous s√ªr de vouloir supprimer le stash %s? (y/N): %s", ColorRed, stashRef, ColorReset)
	confirm := gm.getUserInput()

	if strings.ToLower(confirm) == "y" {
		output, err := gm.runGitCommand("stash", "drop", stashRef)
		if err != nil {
			fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
		} else {
			fmt.Printf("%s‚úÖ Stash %s supprim√©!%s\n", ColorGreen, stashRef, ColorReset)
		}
	}
	gm.pause()
}

func (gm *GitManager) clearStashes() {
	stashes, _ := gm.runGitCommand("stash", "list")
	if stashes == "" {
		fmt.Printf("%s‚ùå Aucun stash √† supprimer!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	fmt.Printf("%süóÇÔ∏è  Stashes actuels:%s\n", ColorBlue, ColorReset)
	fmt.Println(stashes)

	fmt.Printf("\n%s‚ö†Ô∏è  √ätes-vous s√ªr de vouloir supprimer TOUS les stashes? (y/N): %s", ColorRed, ColorReset)
	confirm := gm.getUserInput()

	if strings.ToLower(confirm) == "y" {
		output, err := gm.runGitCommand("stash", "clear")
		if err != nil {
			fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
		} else {
			fmt.Printf("%s‚úÖ Tous les stashes supprim√©s!%s\n", ColorGreen, ColorReset)
		}
	}
	gm.pause()
}

func (gm *GitManager) stashToBranch() {
	stashes, _ := gm.runGitCommand("stash", "list")
	if stashes == "" {
		fmt.Printf("%s‚ùå Aucun stash disponible!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	fmt.Printf("%süóÇÔ∏è  Stashes disponibles:%s\n", ColorBlue, ColorReset)
	fmt.Println(stashes)

	fmt.Printf("\n%sIndex du stash (0 pour le plus r√©cent): %s", ColorYellow, ColorReset)
	indexStr := gm.getUserInput()

	index := 0
	if indexStr != "" {
		if i, err := strconv.Atoi(indexStr); err == nil {
			index = i
		}
	}

	fmt.Printf("%sNom de la nouvelle branche: %s", ColorYellow, ColorReset)
	branchName := gm.getUserInput()

	if branchName == "" {
		fmt.Printf("%s‚ùå Nom de branche requis!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	stashRef := fmt.Sprintf("stash@{%d}", index)
	output, err := gm.runGitCommand("stash", "branch", branchName, stashRef)
	if err != nil {
		fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
	} else {
		fmt.Printf("%s‚úÖ Branche '%s' cr√©√©e depuis le stash %s!%s\n", ColorGreen, branchName, stashRef, ColorReset)
	}
	gm.pause()
}

// Statistics
func (gm *GitManager) showGeneralStats() {
	fmt.Printf("%s%süìä STATISTIQUES G√âN√âRALES%s\n", ColorBold, ColorBlue, ColorReset)
	fmt.Println(strings.Repeat("‚ïê", 40))

	totalCommits, _ := gm.runGitCommand("rev-list", "--count", "HEAD")
	fmt.Printf("%süì¶ Total commits: %s%s%s\n", ColorGreen, ColorWhite, totalCommits, ColorReset)

	branches, _ := gm.runGitCommand("branch", "-r")
	branchCount := 0
	if branches != "" {
		branchCount = len(strings.Split(strings.TrimSpace(branches), "\n"))
	}
	localBranches, _ := gm.runGitCommand("branch")
	localCount := 0
	if localBranches != "" {
		localCount = len(strings.Split(strings.TrimSpace(localBranches), "\n"))
	}

	fmt.Printf("%süåø Branches locales: %s%d%s\n", ColorGreen, ColorWhite, localCount, ColorReset)
	fmt.Printf("%süåê Branches remote: %s%d%s\n", ColorGreen, ColorWhite, branchCount, ColorReset)

	tags, _ := gm.runGitCommand("tag")
	tagCount := 0
	if tags != "" {
		tagCount = len(strings.Split(strings.TrimSpace(tags), "\n"))
	}
	fmt.Printf("%süè∑Ô∏è  Tags: %s%d%s\n", ColorGreen, ColorWhite, tagCount, ColorReset)

	firstCommit, _ := gm.runGitCommand("log", "--reverse", "--pretty=format:%h - %s (%an, %ad)", "--date=short", "-1")
	lastCommit, _ := gm.runGitCommand("log", "--pretty=format:%h - %s (%an, %ad)", "--date=short", "-1")

	fmt.Printf("\n%süìÖ Premier commit:%s\n%s\n", ColorYellow, ColorReset, firstCommit)
	fmt.Printf("%süìÖ Dernier commit:%s\n%s\n", ColorYellow, ColorReset, lastCommit)

	repoSize, _ := gm.runGitCommand("count-objects", "-vH")
	fmt.Printf("\n%süíæ Taille du d√©p√¥t:%s\n", ColorCyan, ColorReset)
	fmt.Println(repoSize)

	gm.pause()
}

func (gm *GitManager) showContributorStats() {
	fmt.Printf("%s%süë• STATISTIQUES DES CONTRIBUTEURS%s\n", ColorBold, ColorBlue, ColorReset)
	fmt.Println(strings.Repeat("‚ïê", 45))

	contributors, _ := gm.runGitCommand("shortlog", "-sn", "--all")
	fmt.Printf("%süìà Commits par contributeur:%s\n", ColorGreen, ColorReset)
	fmt.Println(contributors)

	fmt.Printf("\n%süìÖ Activit√© par mois (12 derniers mois):%s\n", ColorYellow, ColorReset)
	activity, _ := gm.runGitCommand("log", "--pretty=format:%ad", "--date=format:%Y-%m", "--since=12.months.ago")
	if activity != "" {
		months := strings.Split(activity, "\n")
		monthCount := make(map[string]int)
		for _, month := range months {
			monthCount[month]++
		}

		var sortedMonths []string
		for month := range monthCount {
			sortedMonths = append(sortedMonths, month)
		}
		sort.Strings(sortedMonths)

		for _, month := range sortedMonths {
			fmt.Printf("%s: %d commits\n", month, monthCount[month])
		}
	}

	gm.pause()
}

func (gm *GitManager) showDetailedHistory() {
	fmt.Printf("%sNombre de commits √† afficher (d√©faut: 20): %s", ColorYellow, ColorReset)
	countStr := gm.getUserInput()

	count := 20
	if countStr != "" {
		if c, err := strconv.Atoi(countStr); err == nil {
			count = c
		}
	}

	fmt.Println("\n1. Format court")
	fmt.Println("2. Format d√©taill√©")
	fmt.Println("3. Format personnalis√©")

	fmt.Printf("\n%sChoisissez un format: %s", ColorYellow, ColorReset)
	choice := gm.getUserInput()

	var output string
	var err error

	switch choice {
	case "1":
		output, err = gm.runGitCommand("log", "--oneline", "--graph", "--decorate", fmt.Sprintf("-%d", count))
	case "2":
		output, err = gm.runGitCommand("log", "--graph", "--pretty=format:%C(yellow)%h%C(reset) - %C(green)(%ar)%C(reset) %s %C(bold blue)<%an>%C(reset)", fmt.Sprintf("-%d", count))
	case "3":
		fmt.Printf("%sFormat personnalis√© (ex: %%h - %%s (%%an)): %s", ColorYellow, ColorReset)
		format := gm.getUserInput()
		if format != "" {
			output, err = gm.runGitCommand("log", "--pretty=format:"+format, fmt.Sprintf("-%d", count))
		}
	default:
		output, err = gm.runGitCommand("log", "--oneline", fmt.Sprintf("-%d", count))
	}

	if err != nil {
		fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
	} else {
		fmt.Printf("%süìà Historique:%s\n", ColorBlue, ColorReset)
		fmt.Println(output)
	}

	gm.pause()
}

func (gm *GitManager) showBranchGraph() {
	fmt.Printf("%s%süå≥ GRAPHIQUE DES BRANCHES%s\n", ColorBold, ColorBlue, ColorReset)
	fmt.Println(strings.Repeat("‚ïê", 35))

	// V√©rifier d'abord s'il y a plusieurs branches
	localBranches, _ := gm.runGitCommand("branch")

	branchCount := len(strings.Split(strings.TrimSpace(localBranches), "\n"))
	if localBranches == "" {
		branchCount = 0
	}

	fmt.Printf("%süìä Analyse des branches:%s\n", ColorCyan, ColorReset)
	fmt.Printf("   %sBranches locales: %s%d%s\n", ColorBlue, ColorYellow, branchCount, ColorReset)

	if branchCount <= 1 {
		fmt.Printf("%süí° Vous n'avez qu'une seule branche, le graphique sera lin√©aire.%s\n", ColorYellow, ColorReset)
		fmt.Printf("%s   Cr√©ez des branches pour voir un vrai graphique de d√©veloppement !%s\n\n", ColorYellow, ColorReset)
	}

	fmt.Printf("%sNombre de commits √† afficher (d√©faut: 30): %s", ColorYellow, ColorReset)
	countStr := gm.getUserInput()

	count := 30
	if countStr != "" {
		if c, err := strconv.Atoi(countStr); err == nil {
			count = c
		}
	}

	fmt.Printf("\n%sChoisissez le style d'affichage:%s\n", ColorCyan, ColorReset)
	fmt.Println("1. Graphique simple (par d√©faut)")
	fmt.Println("2. Graphique d√©taill√© avec couleurs")
	fmt.Println("3. Vue compacte (oneline)")
	fmt.Println("4. Vue avec statistiques des fichiers")
	fmt.Println("5. Vue par auteur")

	fmt.Printf("\n%sStyle (d√©faut 2): %s", ColorYellow, ColorReset)
	style := gm.getUserInput()

	var output string
	var err error

	switch style {
	case "1":
		output, err = gm.runGitCommand("log", "--graph", "--pretty=format:%h - %s (%ar) <%an>", "--all", fmt.Sprintf("-%d", count))
	case "3":
		output, err = gm.runGitCommand("log", "--graph", "--oneline", "--all", fmt.Sprintf("-%d", count))
	case "4":
		output, err = gm.runGitCommand("log", "--graph", "--stat", "--pretty=format:%C(yellow)%h%C(reset) - %s %C(green)(%ar)%C(reset) %C(bold blue)<%an>%C(reset)", fmt.Sprintf("-%d", count))
	case "5":
		// Vue par auteur avec couleurs
		output, err = gm.runGitCommand("log", "--graph", "--pretty=format:%C(red)%h%C(reset) %C(green)%s%C(reset) %C(yellow)(%ar)%C(reset) %C(bold blue)by %an%C(reset)", "--all", fmt.Sprintf("-%d", count))
	default: // Style 2 - d√©taill√© avec couleurs (par d√©faut)
		output, err = gm.runGitCommand("log", "--graph", "--pretty=format:%C(auto)%h%C(reset) %C(bold)-%C(reset) %C(white)%s%C(reset) %C(green)(%ar)%C(reset) %C(bold blue)<%an>%C(reset)", "--all", fmt.Sprintf("-%d", count))
	}

	if err != nil {
		fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
	} else {
		fmt.Printf("\n%süåø Historique des branches:%s\n", ColorGreen, ColorReset)
		fmt.Println(strings.Repeat("‚îÄ", 50))
		fmt.Println(output)

		// Ajouter des statistiques utiles
		fmt.Printf("\n%süìà Statistiques rapides:%s\n", ColorBlue, ColorReset)

		// Derni√®re activit√©
		lastCommit, _ := gm.runGitCommand("log", "-1", "--pretty=format:%ar")
		fmt.Printf("   %sDerni√®re activit√©: %s%s%s\n", ColorCyan, ColorWhite, lastCommit, ColorReset)

		// Nombre total de commits
		totalCommits, _ := gm.runGitCommand("rev-list", "--count", "HEAD")
		fmt.Printf("   %sTotal commits: %s%s%s\n", ColorCyan, ColorWhite, totalCommits, ColorReset)

		// Branches remote si elles existent
		remoteBranches, _ := gm.runGitCommand("branch", "-r")
		if remoteBranches != "" {
			remoteCount := len(strings.Split(strings.TrimSpace(remoteBranches), "\n"))
			fmt.Printf("   %sBranches remote: %s%d%s\n", ColorCyan, ColorWhite, remoteCount, ColorReset)
		}
	}

	gm.pause()
}

// Nouvelle fonction pour afficher un arbre complet de tous les commits et branches
func (gm *GitManager) showCompleteTree() {
	fmt.Printf("%s%süå≥ VUE ARBRE COMPL√àTE - TOUS COMMITS & BRANCHES%s\n", ColorBold, ColorGreen, ColorReset)
	fmt.Println(strings.Repeat("‚ïê", 55))

	currentBranch := gm.getCurrentBranch()
	fmt.Printf("%süìç Branche actuelle: %s%s%s\n\n", ColorBlue, ColorCyan, currentBranch, ColorReset)

	fmt.Printf("%sNombre de commits √† afficher (d√©faut: 50): %s", ColorYellow, ColorReset)
	countStr := gm.getUserInput()

	count := 50
	if countStr != "" {
		if c, err := strconv.Atoi(countStr); err == nil {
			count = c
		}
	}

	fmt.Printf("\n%sStyle d'arbre:%s\n", ColorCyan, ColorReset)
	fmt.Println("1. Arbre complet avec toutes les branches (recommand√©)")
	fmt.Println("2. Arbre avec couleurs et d√©coration avanc√©e")
	fmt.Println("3. Arbre compact avec hash courts")
	fmt.Println("4. Arbre avec informations de merge")
	fmt.Println("5. Arbre ASCII artistique")

	fmt.Printf("\n%sStyle (d√©faut 1): %s", ColorYellow, ColorReset)
	style := gm.getUserInput()

	var output string
	var err error

	switch style {
	case "2":
		// Arbre avec couleurs et d√©coration avanc√©e
		output, err = gm.runGitCommand("log",
			"--graph",
			"--all",
			"--decorate",
			"--pretty=format:%C(auto)%h%C(reset) %C(bold yellow)‚îÇ%C(reset) %C(white)%s%C(reset) %C(dim)(%ar)%C(reset) %C(bold blue)<%an>%C(reset)%C(auto)%d%C(reset)",
			fmt.Sprintf("-%d", count))
	case "3":
		// Arbre compact
		output, err = gm.runGitCommand("log",
			"--graph",
			"--all",
			"--oneline",
			"--decorate",
			fmt.Sprintf("-%d", count))
	case "4":
		// Arbre avec informations de merge
		output, err = gm.runGitCommand("log",
			"--graph",
			"--all",
			"--decorate",
			"--merges",
			"--pretty=format:%C(yellow)%h%C(reset) %C(bold)MERGE:%C(reset) %C(white)%s%C(reset) %C(green)(%ar)%C(reset) %C(blue)<%an>%C(reset)%C(auto)%d%C(reset)",
			fmt.Sprintf("-%d", count))
	case "5":
		// Arbre ASCII artistique
		output, err = gm.runGitCommand("log",
			"--graph",
			"--all",
			"--decorate",
			"--pretty=format:%C(red)‚óè%C(reset) %C(yellow)%h%C(reset) %C(bold)‚îÅ%C(reset) %C(white)%s%C(reset)%C(auto)%d%C(reset)%n%C(dim)  ‚ï∞‚îÄ %ar by %an%C(reset)",
			fmt.Sprintf("-%d", count))
	default: // Style 1 - Arbre complet (par d√©faut)
		output, err = gm.runGitCommand("log",
			"--graph",
			"--all",
			"--decorate",
			"--date=relative",
			"--pretty=format:%C(auto)%h%C(reset) - %C(white)%s%C(reset) %C(green)(%ar)%C(reset) %C(bold blue)<%an>%C(reset)%C(auto)%d%C(reset)",
			fmt.Sprintf("-%d", count))
	}

	if err != nil {
		fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
		gm.pause()
		return
	}

	// Afficher l'arbre
	fmt.Printf("\n%süåø ARBRE COMPLET:%s\n", ColorGreen, ColorReset)
	fmt.Println(strings.Repeat("‚îÄ", 80))
	fmt.Println(output)

	// Ajouter un r√©sum√© des branches
	fmt.Printf("\n%süìä R√âSUM√â DES BRANCHES:%s\n", ColorBlue, ColorReset)
	gm.showBranchSummary()

	gm.pause()
}

// Fonction helper pour afficher un r√©sum√© des branches
func (gm *GitManager) showBranchSummary() {
	// Branches locales avec leurs derniers commits
	localBranches, _ := gm.runGitCommand("for-each-ref",
		"--format=%(refname:short)|%(objectname:short)|%(committerdate:relative)|%(subject)",
		"refs/heads/")

	if localBranches != "" {
		fmt.Printf("%süè† Branches locales:%s\n", ColorCyan, ColorReset)
		lines := strings.Split(localBranches, "\n")
		for _, line := range lines {
			if line != "" {
				parts := strings.Split(line, "|")
				if len(parts) >= 4 {
					branchName := parts[0]
					hash := parts[1]
					date := parts[2]
					subject := parts[3]

					// Limiter la longueur du message
					if len(subject) > 50 {
						subject = subject[:47] + "..."
					}

					currentBranch := gm.getCurrentBranch()
					if branchName == currentBranch {
						fmt.Printf("   %s* %-15s%s %s%s%s (%s) - %s\n",
							ColorGreen, branchName, ColorReset, ColorYellow, hash, ColorReset, date, subject)
					} else {
						fmt.Printf("     %-15s %s%s%s (%s) - %s\n",
							branchName, ColorYellow, hash, ColorReset, date, subject)
					}
				}
			}
		}
	}

	// Branches remote si elles existent
	remoteBranches, _ := gm.runGitCommand("for-each-ref",
		"--format=%(refname:short)|%(objectname:short)|%(committerdate:relative)",
		"refs/remotes/")

	if remoteBranches != "" {
		fmt.Printf("\n%süåê Branches remote:%s\n", ColorCyan, ColorReset)
		lines := strings.Split(remoteBranches, "\n")
		for _, line := range lines {
			if line != "" {
				parts := strings.Split(line, "|")
				if len(parts) >= 3 {
					branchName := parts[0]
					hash := parts[1]
					date := parts[2]
					fmt.Printf("     %-20s %s%s%s (%s)\n",
						branchName, ColorYellow, hash, ColorReset, date)
				}
			}
		}
	}

	// Statistiques rapides
	totalCommits, _ := gm.runGitCommand("rev-list", "--count", "--all")
	fmt.Printf("\n%süìà Total commits (toutes branches): %s%s%s\n", ColorGreen, ColorWhite, totalCommits, ColorReset)
}

// Fonction bonus pour visualiser l'arbre des branches de mani√®re plus graphique
func (gm *GitManager) showBranchTree() {
	fmt.Printf("%s%süå≤ ARBRE DES BRANCHES%s\n", ColorBold, ColorGreen, ColorReset)
	fmt.Println(strings.Repeat("‚ïê", 25))

	// Lister toutes les branches avec leurs derniers commits
	branches, _ := gm.runGitCommand("branch", "-v")
	fmt.Printf("%süìã Branches locales:%s\n", ColorBlue, ColorReset)
	fmt.Println(branches)

	// Afficher les relations entre branches
	fmt.Printf("\n%süîó Relations entre branches:%s\n", ColorYellow, ColorReset)

	// Pour chaque branche, montrer depuis quel commit elle diverge
	localBranches, _ := gm.runGitCommand("branch", "--format=%(refname:short)")
	if localBranches != "" {
		branchLines := strings.Split(strings.TrimSpace(localBranches), "\n")
		currentBranch := gm.getCurrentBranch()

		for _, branch := range branchLines {
			if branch != "" && branch != currentBranch {
				// Trouver le commit de divergence
				mergeBase, _ := gm.runGitCommand("merge-base", currentBranch, branch)
				if mergeBase != "" {
					shortHash := mergeBase[:7]
					commitMsg, _ := gm.runGitCommand("log", "-1", "--pretty=format:%s", mergeBase)
					fmt.Printf("   %s%s%s ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ %s%s%s\n", ColorCyan, currentBranch, ColorReset, ColorYellow, branch, ColorReset)
					fmt.Printf("      ‚îÇ   ‚îî‚îÄ diverge depuis: %s%s - %s%s\n", ColorGreen, shortHash, commitMsg, ColorReset)
				}
			}
		}

		if len(branchLines) == 1 {
			fmt.Printf("   %s%s%s (branche unique)\n", ColorGreen, currentBranch, ColorReset)
			fmt.Printf("   ‚îî‚îÄ %süí° Cr√©ez des branches pour voir les relations !%s\n", ColorYellow, ColorReset)
		}
	}

	gm.pause()
}

func (gm *GitManager) showFileStats() {
	for {
		gm.clearScreen()
		fmt.Printf("%s%süìÅ STATISTIQUES PAR FICHIER%s\n", ColorBold, ColorBlue, ColorReset)
		fmt.Println(strings.Repeat("‚ïê", 35))

		fmt.Println("1. Fichiers les plus modifi√©s")
		fmt.Println("2. Lignes ajout√©es/supprim√©es par fichier")
		fmt.Println("3. Historique d'un fichier sp√©cifique")
		fmt.Println("0. Retour")

		fmt.Printf("\n%sChoisissez une option: %s", ColorYellow, ColorReset)
		choice := gm.getUserInput()

		switch choice {
		case "1":
			output, err := gm.runGitCommand("log", "--pretty=format:", "--name-only")
			if err != nil {
				fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
			} else {
				files := strings.Split(output, "\n")
				fileCount := make(map[string]int)
				for _, file := range files {
					if file != "" {
						fileCount[file]++
					}
				}

				type fileInfo struct {
					name  string
					count int
				}
				var sortedFiles []fileInfo
				for name, count := range fileCount {
					sortedFiles = append(sortedFiles, fileInfo{name, count})
				}

				sort.Slice(sortedFiles, func(i, j int) bool {
					return sortedFiles[i].count > sortedFiles[j].count
				})

				fmt.Printf("%süìä Fichiers les plus modifi√©s:%s\n", ColorGreen, ColorReset)
				for i, file := range sortedFiles {
					if i >= 20 {
						break
					}
					fmt.Printf("%s%3d%s modifications - %s\n", ColorYellow, file.count, ColorReset, file.name)
				}
			}
			gm.pause()

		case "2":
			output, err := gm.runGitCommand("log", "--numstat", "--pretty=format:")
			if err != nil {
				fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
			} else {
				lines := strings.Split(output, "\n")
				fileStats := make(map[string][2]int) // [additions, deletions]

				for _, line := range lines {
					if line != "" {
						parts := strings.Fields(line)
						if len(parts) == 3 {
							if parts[0] == "-" { // Binary file
								continue
							}
							filename := parts[2]
							if additions, err := strconv.Atoi(parts[0]); err == nil {
								if deletions, err := strconv.Atoi(parts[1]); err == nil {
									stats := fileStats[filename]
									stats[0] += additions
									stats[1] += deletions
									fileStats[filename] = stats
								}
							}
						}
					}
				}

				fmt.Printf("%süìä Lignes ajout√©es/supprim√©es:%s\n", ColorGreen, ColorReset)
				for filename, stats := range fileStats {
					fmt.Printf("%s+%d%s %s-%d%s %s\n", ColorGreen, stats[0], ColorReset, ColorRed, stats[1], ColorReset, filename)
				}
			}
			gm.pause()

		case "3":
			fmt.Printf("%sNom du fichier: %s", ColorYellow, ColorReset)
			filename := gm.getUserInput()
			if filename != "" {
				output, err := gm.runGitCommand("log", "--follow", "--oneline", "--", filename)
				if err != nil {
					fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
				} else {
					fmt.Printf("%süìä Historique de '%s':%s\n", ColorGreen, filename, ColorReset)
					fmt.Println(output)
				}
			}
			gm.pause()
		case "0":
			return
		default:
			fmt.Printf("%s‚ùå Option invalide!%s\n", ColorRed, ColorReset)
			gm.pause()
		}
	}
}

func (gm *GitManager) showBlame() {
	fmt.Printf("%sNom du fichier √† analyser: %s", ColorYellow, ColorReset)
	filename := gm.getUserInput()

	if filename == "" {
		return
	}

	if _, err := os.Stat(filepath.Join(gm.currentPath, filename)); os.IsNotExist(err) {
		fmt.Printf("%s‚ùå Fichier '%s' introuvable!%s\n", ColorRed, filename, ColorReset)
		gm.pause()
		return
	}

	for {
		gm.clearScreen()
		fmt.Println("1. Bl√¢me complet")
		fmt.Println("2. Bl√¢me avec statistiques")
		fmt.Println("3. Bl√¢me d'une plage de lignes")
		fmt.Println("0. Retour")

		fmt.Printf("\n%sChoisissez une option: %s", ColorYellow, ColorReset)
		choice := gm.getUserInput()

		var output string
		var err error

		switch choice {
		case "1":
			output, err = gm.runGitCommand("blame", filename)
		case "2":
			output, err = gm.runGitCommand("blame", "-w", "-C", "-C", "-C", filename)
		case "3":
			fmt.Printf("%sLigne de d√©but: %s", ColorYellow, ColorReset)
			startLine := gm.getUserInput()
			fmt.Printf("%sLigne de fin: %s", ColorYellow, ColorReset)
			endLine := gm.getUserInput()

			if startLine != "" && endLine != "" {
				lineRange := fmt.Sprintf("-L%s,%s", startLine, endLine)
				output, err = gm.runGitCommand("blame", lineRange, filename)
			}
		case "0":
			return
		default:
			fmt.Printf("%s‚ùå Option invalide!%s\n", ColorRed, ColorReset)
			gm.pause()
			continue
		}

		if err != nil {
			fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
		} else {
			fmt.Printf("%süîç Bl√¢me de '%s':%s\n", ColorBlue, filename, ColorReset)
			fmt.Println(output)
		}
		gm.pause()
	}
}

func (gm *GitManager) searchHistory() {
	for {
		gm.clearScreen()
		fmt.Println("1. Rechercher dans les messages de commit")
		fmt.Println("2. Rechercher dans le code (diff)")
		fmt.Println("3. Rechercher par auteur")
		fmt.Println("4. Rechercher par date")
		fmt.Println("0. Retour")

		fmt.Printf("\n%sChoisissez une option: %s", ColorYellow, ColorReset)
		choice := gm.getUserInput()

		var output string
		var err error
		var args []string

		switch choice {
		case "1":
			fmt.Printf("%sTerme √† rechercher: %s", ColorYellow, ColorReset)
			term := gm.getUserInput()
			if term != "" {
				args = []string{"log", "--grep=" + term, "--oneline"}
				output, err = gm.runGitCommand(args...)
				fmt.Printf("%süîç Commits contenant '%s':%s\n", ColorBlue, term, ColorReset)
			}
		case "2":
			fmt.Printf("%sCode √† rechercher: %s", ColorYellow, ColorReset)
			code := gm.getUserInput()
			if code != "" {
				args = []string{"log", "-S" + code, "--oneline"}
				output, err = gm.runGitCommand(args...)
				fmt.Printf("%süîç Commits modifiant '%s':%s\n", ColorBlue, code, ColorReset)
			}
		case "3":
			fmt.Printf("%sAuteur √† rechercher: %s", ColorYellow, ColorReset)
			author := gm.getUserInput()
			if author != "" {
				args = []string{"log", "--author=" + author, "--oneline"}
				output, err = gm.runGitCommand(args...)
				fmt.Printf("%süîç Commits de '%s':%s\n", ColorBlue, author, ColorReset)
			}
		case "4":
			fmt.Printf("%sDate de d√©but (YYYY-MM-DD): %s", ColorYellow, ColorReset)
			since := gm.getUserInput()
			fmt.Printf("%sDate de fin (YYYY-MM-DD, optionnel): %s", ColorYellow, ColorReset)
			until := gm.getUserInput()

			if since != "" {
				args = []string{"log", "--oneline", "--since=" + since}
				if until != "" {
					args = append(args, "--until="+until)
				}
				output, err = gm.runGitCommand(args...)
				fmt.Printf("%süîç Commits depuis %s", ColorBlue, since)
				if until != "" {
					fmt.Printf(" jusqu'√† %s", until)
				}
				fmt.Printf(":%s\n", ColorReset)
			}
		case "0":
			return
		default:
			fmt.Printf("%s‚ùå Option invalide!%s\n", ColorRed, ColorReset)
			gm.pause()
			continue
		}

		if err != nil {
			fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
		} else if output == "" {
			fmt.Printf("%s‚ùå Aucun r√©sultat%s\n", ColorRed, ColorReset)
		} else {
			fmt.Println(output)
		}
		gm.pause()
	}
}

// Tools
func (gm *GitManager) manageConfig() {
	for {
		gm.clearScreen()
		fmt.Println("1. Voir la configuration")
		fmt.Println("2. Configurer utilisateur")
		fmt.Println("3. Configurer email")
		fmt.Println("4. Autres configurations")
		fmt.Println("0. Retour")

		fmt.Printf("\n%sChoisissez une option: %s", ColorYellow, ColorReset)
		choice := gm.getUserInput()

		switch choice {
		case "1":
			output, err := gm.runGitCommand("config", "--list")
			if err != nil {
				fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
			} else {
				fmt.Printf("%s‚öôÔ∏è  Configuration actuelle:%s\n", ColorBlue, ColorReset)
				fmt.Println(output)
			}
			gm.pause()
		case "2":
			fmt.Printf("%sNom d'utilisateur: %s", ColorYellow, ColorReset)
			username := gm.getUserInput()
			if username != "" {
				output, err := gm.runGitCommand("config", "user.name", username)
				if err != nil {
					fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
				} else {
					fmt.Printf("%s‚úÖ Nom d'utilisateur configur√©!%s\n", ColorGreen, ColorReset)
				}
			}
			gm.pause()
		case "3":
			fmt.Printf("%sEmail: %s", ColorYellow, ColorReset)
			email := gm.getUserInput()
			if email != "" {
				output, err := gm.runGitCommand("config", "user.email", email)
				if err != nil {
					fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
				} else {
					fmt.Printf("%s‚úÖ Email configur√©!%s\n", ColorGreen, ColorReset)
				}
			}
			gm.pause()
		case "4":
			fmt.Println("Configurations rapides:")
			fmt.Println("a. Activer la couleur")
			fmt.Println("b. Configurer l'√©diteur par d√©faut")
			fmt.Println("c. Configurer le push par d√©faut")

			fmt.Printf("\n%sChoisissez: %s", ColorYellow, ColorReset)
			subChoice := gm.getUserInput()

			switch subChoice {
			case "a":
				gm.runGitCommand("config", "color.ui", "auto")
				fmt.Printf("%s‚úÖ Couleur activ√©e!%s\n", ColorGreen, ColorReset)
			case "b":
				fmt.Printf("%s√âditeur (nano, vim, code, etc.): %s", ColorYellow, ColorReset)
				editor := gm.getUserInput()
				if editor != "" {
					gm.runGitCommand("config", "core.editor", editor)
					fmt.Printf("%s‚úÖ √âditeur configur√©!%s\n", ColorGreen, ColorReset)
				}
			case "c":
				gm.runGitCommand("config", "push.default", "simple")
				fmt.Printf("%s‚úÖ Push par d√©faut configur√©!%s\n", ColorGreen, ColorReset)
			}
			gm.pause()
		case "0":
			return
		default:
			fmt.Printf("%s‚ùå Option invalide!%s\n", ColorRed, ColorReset)
			gm.pause()
		}
	}
}

func (gm *GitManager) cleanRepo() {
	for {
		gm.clearScreen()
		fmt.Printf("%süßπ NETTOYAGE DU D√âP√îT%s\n", ColorYellow, ColorReset)
		fmt.Println(strings.Repeat("‚ïê", 25))

		fmt.Println("1. Nettoyer les fichiers non track√©s (clean)")
		fmt.Println("2. Nettoyer les objets inaccessibles (prune)")
		fmt.Println("3. Optimiser le d√©p√¥t (gc)")
		fmt.Println("4. Nettoyage complet")
		fmt.Println("0. Retour")

		fmt.Printf("\n%sChoisissez une option: %s", ColorYellow, ColorReset)
		choice := gm.getUserInput()

		switch choice {
		case "1":
			preview, _ := gm.runGitCommand("clean", "-n")
			if preview != "" {
				fmt.Printf("%sFichiers qui seront supprim√©s:%s\n", ColorRed, ColorReset)
				fmt.Println(preview)

				fmt.Printf("\n%sContinuer? (y/N): %s", ColorYellow, ColorReset)
				confirm := gm.getUserInput()
				if strings.ToLower(confirm) == "y" {
					output, err := gm.runGitCommand("clean", "-f")
					if err != nil {
						fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
					} else {
						fmt.Printf("%s‚úÖ Fichiers non track√©s supprim√©s!%s\n", ColorGreen, ColorReset)
					}
				}
			} else {
				fmt.Printf("%s‚úÖ Aucun fichier √† nettoyer!%s\n", ColorGreen, ColorReset)
			}
			gm.pause()
		case "2":
			fmt.Printf("%sNettoyage des objets inaccessibles...%s\n", ColorYellow, ColorReset)
			output, err := gm.runGitCommand("gc", "--prune=now")
			if err != nil {
				fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
			} else {
				fmt.Printf("%s‚úÖ Objets inaccessibles nettoy√©s!%s\n", ColorGreen, ColorReset)
			}
			gm.pause()
		case "3":
			fmt.Printf("%sOptimisation du d√©p√¥t...%s\n", ColorYellow, ColorReset)
			output, err := gm.runGitCommand("gc", "--aggressive", "--prune=now")
			if err != nil {
				fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
			} else {
				fmt.Printf("%s‚úÖ D√©p√¥t optimis√©!%s\n", ColorGreen, ColorReset)
			}
			gm.pause()
		case "4":
			fmt.Printf("%s‚ö†Ô∏è  Nettoyage complet (peut prendre du temps). Continuer? (y/N): %s", ColorRed, ColorReset)
			confirm := gm.getUserInput()
			if strings.ToLower(confirm) == "y" {
				fmt.Printf("%sNettoyage en cours...%s\n", ColorYellow, ColorReset)
				gm.runGitCommand("clean", "-f", "-d")
				gm.runGitCommand("gc", "--aggressive", "--prune=now")
				gm.runGitCommand("reflog", "expire", "--expire=now", "--all")
				fmt.Printf("%s‚úÖ Nettoyage complet termin√©!%s\n", ColorGreen, ColorReset)
			}
			gm.pause()
		case "0":
			return
		default:
			fmt.Printf("%s‚ùå Option invalide!%s\n", ColorRed, ColorReset)
			gm.pause()
		}
	}
}

func (gm *GitManager) checkRepo() {
	for {
		gm.clearScreen()
		fmt.Printf("%süîç V√âRIFICATION DU D√âP√îT%s\n", ColorBlue, ColorReset)
		fmt.Println(strings.Repeat("‚ïê", 30))

		fmt.Println("1. V√©rifier l'int√©grit√© (fsck)")
		fmt.Println("2. Statistiques des objets (count-objects)")
		fmt.Println("0. Retour")

		fmt.Printf("\n%sChoisissez une option: %s", ColorYellow, ColorReset)
		choice := gm.getUserInput()

		switch choice {
		case "1":
			fmt.Printf("%sV√©rification de l'int√©grit√©...%s\n", ColorYellow, ColorReset)
			output, err := gm.runGitCommand("fsck", "--full")
			if err != nil || output != "" {
				fmt.Printf("%s‚ùå Probl√®mes d√©tect√©s:%s\n", ColorRed, ColorReset)
				fmt.Println(output)
			} else {
				fmt.Printf("%s‚úÖ Int√©grit√© v√©rifi√©e! Aucun probl√®me trouv√©.%s\n", ColorGreen, ColorReset)
			}
			gm.pause()
		case "2":
			fmt.Printf("%süìä Statistiques d√©taill√©es:%s\n", ColorBlue, ColorReset)
			output, _ := gm.runGitCommand("count-objects", "-vH")
			fmt.Println(output)
			gm.pause()
		case "0":
			return
		default:
			fmt.Printf("%s‚ùå Option invalide!%s\n", ColorRed, ColorReset)
			gm.pause()
		}
	}
}

func (gm *GitManager) manageHooks() {
	hooksDir := filepath.Join(gm.currentPath, ".git", "hooks")

	for {
		gm.clearScreen()
		fmt.Printf("%sü™ù GESTION DES HOOKS%s\n", ColorPurple, ColorReset)
		fmt.Println(strings.Repeat("‚ïê", 25))

		hooks, err := os.ReadDir(hooksDir)
		if err != nil {
			fmt.Printf("%s‚ùå Impossible de lire le r√©pertoire hooks%s\n", ColorRed, ColorReset)
			gm.pause()
			return
		}

		fmt.Printf("%süìã Hooks disponibles:%s\n", ColorBlue, ColorReset)
		for _, hook := range hooks {
			if !strings.HasSuffix(hook.Name(), ".sample") {
				fmt.Printf("%s‚úÖ %s%s (actif)\n", ColorGreen, hook.Name(), ColorReset)
			} else {
				fmt.Printf("%s‚ö™ %s%s (exemple)\n", ColorYellow, hook.Name(), ColorReset)
			}
		}

		fmt.Println("\n1. Activer un hook d'exemple")
		fmt.Println("2. D√©sactiver un hook")
		fmt.Println("3. Voir le contenu d'un hook")
		fmt.Println("4. Cr√©er un hook personnalis√©")
		fmt.Println("0. Retour")

		fmt.Printf("\n%sChoisissez une option: %s", ColorYellow, ColorReset)
		choice := gm.getUserInput()

		switch choice {
		case "1":
			fmt.Printf("%sNom du hook √† activer (sans .sample): %s", ColorYellow, ColorReset)
			hookName := gm.getUserInput()
			if hookName != "" {
				samplePath := filepath.Join(hooksDir, hookName+".sample")
				hookPath := filepath.Join(hooksDir, hookName)

				if _, err := os.Stat(samplePath); err == nil {
					content, _ := os.ReadFile(samplePath)
					err := os.WriteFile(hookPath, content, 0755)
					if err != nil {
						fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, err.Error(), ColorReset)
					} else {
						fmt.Printf("%s‚úÖ Hook '%s' activ√©!%s\n", ColorGreen, hookName, ColorReset)
					}
				} else {
					fmt.Printf("%s‚ùå Hook d'exemple '%s.sample' introuvable!%s\n", ColorRed, hookName, ColorReset)
				}
			}
			gm.pause()
		case "2":
			fmt.Printf("%sNom du hook √† d√©sactiver: %s", ColorYellow, ColorReset)
			hookName := gm.getUserInput()
			if hookName != "" {
				hookPath := filepath.Join(hooksDir, hookName)
				err := os.Remove(hookPath)
				if err != nil {
					fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, err.Error(), ColorReset)
				} else {
					fmt.Printf("%s‚úÖ Hook '%s' d√©sactiv√©!%s\n", ColorGreen, hookName, ColorReset)
				}
			}
			gm.pause()
		case "3":
			fmt.Printf("%sNom du hook √† voir: %s", ColorYellow, ColorReset)
			hookName := gm.getUserInput()
			if hookName != "" {
				hookPath := filepath.Join(hooksDir, hookName)
				content, err := os.ReadFile(hookPath)
				if err != nil {
					fmt.Printf("%s‚ùå Hook introuvable: %s%s\n", ColorRed, err.Error(), ColorReset)
				} else {
					fmt.Printf("%süìÑ Contenu du hook '%s':%s\n", ColorBlue, hookName, ColorReset)
					fmt.Println(string(content))
				}
			}
			gm.pause()
		case "4":
			fmt.Printf("%sNom du nouveau hook: %s", ColorYellow, ColorReset)
			hookName := gm.getUserInput()
			if hookName != "" {
				hookContent := `#!/bin/sh
# Hook personnalis√©: ` + hookName + `
# Cr√©√© le ` + time.Now().Format("2006-01-02 15:04:05") + `

echo "Ex√©cution du hook ` + hookName + `"

# Ajoutez votre code ici
exit 0
`
				hookPath := filepath.Join(hooksDir, hookName)
				err := os.WriteFile(hookPath, []byte(hookContent), 0755)
				if err != nil {
					fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, err.Error(), ColorReset)
				} else {
					fmt.Printf("%s‚úÖ Hook '%s' cr√©√©!%s\n", ColorGreen, hookName, ColorReset)
				}
			}
			gm.pause()
		case "0":
			return
		default:
			fmt.Printf("%s‚ùå Option invalide!%s\n", ColorRed, ColorReset)
			gm.pause()
		}
	}
}

func (gm *GitManager) manageAliases() {
	// This is a complex feature, so we'll provide a simpler interface
	fmt.Printf("%sLes alias Git sont g√©r√©s dans votre fichier de configuration Git (~/.gitconfig).%s\n", ColorYellow, ColorReset)
	fmt.Println("Exemples d'alias utiles:")
	fmt.Println("  git config --global alias.co checkout")
	fmt.Println("  git config --global alias.br branch")
	fmt.Println("  git config --global alias.ci commit")
	fmt.Println("  git config --global alias.st status")
	fmt.Println("  git config --global alias.last 'log -1 HEAD'")
	gm.pause()
}

func (gm *GitManager) archiveRepo() {
	fmt.Printf("%sFormat d'archive (zip, tar.gz): %s", ColorYellow, ColorReset)
	format := gm.getUserInput()
	if format != "zip" && format != "tar.gz" {
		fmt.Printf("%s‚ùå Format invalide. Utilisez 'zip' ou 'tar.gz'.%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	defaultFileName := filepath.Base(gm.currentPath) + "." + format
	fmt.Printf("%sNom du fichier de sortie (d√©faut: %s): %s", ColorYellow, defaultFileName, ColorReset)
	outputFile := gm.getUserInput()
	if outputFile == "" {
		outputFile = defaultFileName
	}

	output, err := gm.runGitCommand("archive", "--format="+format, "-o", outputFile, "HEAD")
	if err != nil {
		fmt.Printf("%s‚ùå Erreur lors de la cr√©ation de l'archive: %s%s\n", ColorRed, output, ColorReset)
	} else {
		fmt.Printf("%s‚úÖ Archive '%s' cr√©√©e avec succ√®s!%s\n", ColorGreen, outputFile, ColorReset)
	}
	gm.pause()
}

// Main Menu Actions
func (gm *GitManager) changeDirectory() {
	fmt.Printf("%sChemin actuel: %s%s\n", ColorYellow, gm.currentPath, ColorReset)
	fmt.Printf("%sNouveau chemin du r√©pertoire: %s", ColorYellow, ColorReset)
	newPath := gm.getUserInput()

	if newPath == "" {
		return
	}

	if strings.HasPrefix(newPath, "~") {
		home, err := os.UserHomeDir()
		if err == nil {
			newPath = filepath.Join(home, newPath[1:])
		}
	}

	if err := os.Chdir(newPath); err != nil {
		fmt.Printf("%s‚ùå Erreur lors du changement de r√©pertoire: %s%s\n", ColorRed, err, ColorReset)
	} else {
		newWd, _ := os.Getwd()
		gm.currentPath = newWd
		fmt.Printf("%s‚úÖ R√©pertoire chang√© pour: %s%s\n", ColorGreen, gm.currentPath, ColorReset)
	}
	gm.pause()
}

func (gm *GitManager) initRepo() {
	if gm.isGitRepo() {
		fmt.Printf("%s‚ö†Ô∏è  Un d√©p√¥t Git existe d√©j√† dans ce r√©pertoire.%s\n", ColorYellow, ColorReset)
		gm.pause()
		return
	}

	fmt.Printf("%sInitialiser un nouveau d√©p√¥t Git ici? (y/N): %s", ColorYellow, ColorReset)
	confirm := gm.getUserInput()

	if strings.ToLower(confirm) == "y" {
		output, err := gm.runGitCommand("init")
		if err != nil {
			fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
		} else {
			fmt.Printf("%s‚úÖ D√©p√¥t Git initialis√©!%s\n", ColorGreen, ColorReset)
			fmt.Println(output)
		}
	}
	gm.pause()
}

// NOUVELLES FONCTIONS SIMPLIFI√âES POUR L'ACC√àS RAPIDE

func (gm *GitManager) handleQuickCommit() {
	if !gm.isGitRepo() {
		fmt.Printf("%s‚ùå Ce r√©pertoire n'est pas un d√©p√¥t Git!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	fmt.Printf("%s%süì¶ COMMIT RAPIDE%s\n", ColorBold, ColorGreen, ColorReset)
	fmt.Println(strings.Repeat("‚ïê", 20))

	// V√©rifier s'il y a des fichiers en stage
	staged, _ := gm.runGitCommand("diff", "--cached", "--name-only")
	if staged != "" {
		fmt.Printf("%s‚úÖ Fichiers en stage:%s\n", ColorGreen, ColorReset)
		fmt.Println(staged)
		fmt.Printf("\n%sMessage de commit: %s", ColorYellow, ColorReset)
		message := gm.getUserInput()
		if message != "" {
			output, err := gm.runGitCommand("commit", "-m", message)
			if err != nil {
				fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
			} else {
				fmt.Printf("%s‚úÖ Commit cr√©√©!%s\n", ColorGreen, ColorReset)
			}
		} else {
			fmt.Printf("%s‚ùå Message de commit vide. Annulation.%s\n", ColorRed, ColorReset)
		}
	} else {
		fmt.Printf("%süìã Aucun fichier en stage.%s\n", ColorYellow, ColorReset)
		fmt.Printf("%s1.%s Voir l'historique des commits\n", ColorCyan, ColorReset)
		fmt.Printf("%s2.%s Aller au menu complet des commits\n", ColorCyan, ColorReset)
		fmt.Printf("%s0.%s Retour\n", ColorRed, ColorReset)

		fmt.Printf("\n%sChoisissez: %s", ColorYellow, ColorReset)
		choice := gm.getUserInput()

		switch choice {
		case "1":
			output, _ := gm.runGitCommand("log", "--oneline", "--graph", "--decorate", "-10")
			fmt.Printf("%süìà 10 derniers commits:%s\n", ColorBlue, ColorReset)
			fmt.Println(output)
			gm.pause()
		case "2":
			gm.handleCommitManagement()
			return // Ne pas faire de pause, on va dans le menu complet
		}
	}
	gm.pause()
}

func (gm *GitManager) handleQuickFiles() {
	if !gm.isGitRepo() {
		fmt.Printf("%s‚ùå Ce r√©pertoire n'est pas un d√©p√¥t Git!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	fmt.Printf("%s%süìÅ FICHIERS RAPIDE%s\n", ColorBold, ColorGreen, ColorReset)
	fmt.Println(strings.Repeat("‚ïê", 20))

	status := gm.getGitStatus()
	if status == "" {
		fmt.Printf("%s‚úÖ Aucun changement d√©tect√©%s\n", ColorGreen, ColorReset)
		gm.pause()
		return
	}

	fmt.Printf("%süìã Fichiers modifi√©s:%s\n", ColorYellow, ColorReset)
	lines := strings.Split(status, "\n")
	for _, line := range lines {
		if line != "" {
			gm.printFileStatus(line)
		}
	}

	fmt.Printf("\n%s1.%s Ajouter tous les fichiers et voir diff\n", ColorCyan, ColorReset)
	fmt.Printf("%s2.%s Voir seulement les diff√©rences\n", ColorCyan, ColorReset)
	fmt.Printf("%s3.%s Menu complet des fichiers\n", ColorCyan, ColorReset)
	fmt.Printf("%s0.%s Retour\n", ColorRed, ColorReset)

	fmt.Printf("\n%sChoisissez: %s", ColorYellow, ColorReset)
	choice := gm.getUserInput()

	switch choice {
	case "1":
		output, err := gm.runGitCommand("add", ".")
		if err != nil {
			fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
		} else {
			fmt.Printf("%s‚úÖ Tous les fichiers ajout√©s!%s\n", ColorGreen, ColorReset)
			// Afficher un r√©sum√©
			staged, _ := gm.runGitCommand("diff", "--cached", "--stat")
			fmt.Printf("%süìä R√©sum√© des changements:%s\n", ColorBlue, ColorReset)
			fmt.Println(staged)
		}
		gm.pause()
	case "2":
		output, _ := gm.runGitCommand("diff", "--color=always")
		if output != "" {
			fmt.Printf("%süìä Diff√©rences:%s\n", ColorBlue, ColorReset)
			fmt.Println(output)
		} else {
			fmt.Printf("%s‚úÖ Aucun changement non stag√© √† afficher.%s\n", ColorGreen, ColorReset)
		}
		gm.pause()
	case "3":
		gm.handleFileManagement()
		return
	}
}

func (gm *GitManager) handleQuickBranch() {
	if !gm.isGitRepo() {
		fmt.Printf("%s‚ùå Ce r√©pertoire n'est pas un d√©p√¥t Git!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	currentBranch := gm.getCurrentBranch()
	fmt.Printf("%s%süåø BRANCHES RAPIDE%s\n", ColorBold, ColorGreen, ColorReset)
	fmt.Println(strings.Repeat("‚ïê", 20))
	fmt.Printf("%sBranche actuelle: %s%s%s\n\n", ColorBlue, ColorCyan, currentBranch, ColorReset)

	branches, _ := gm.runGitCommand("branch", "--format=%(refname:short)")
	fmt.Printf("%sBranches locales:%s\n", ColorYellow, ColorReset)
	fmt.Println(branches)

	fmt.Printf("\n%s1.%s Cr√©er une nouvelle branche\n", ColorCyan, ColorReset)
	fmt.Printf("%s2.%s Changer de branche\n", ColorCyan, ColorReset)
	fmt.Printf("%s3.%s Menu complet des branches\n", ColorCyan, ColorReset)
	fmt.Printf("%s0.%s Retour\n", ColorRed, ColorReset)

	fmt.Printf("\n%sChoisissez: %s", ColorYellow, ColorReset)
	choice := gm.getUserInput()

	switch choice {
	case "1":
		gm.createBranch()
	case "2":
		gm.switchBranch()
	case "3":
		gm.handleBranchManagement()
		return
	}
}

func (gm *GitManager) handleQuickRemote() {
	if !gm.isGitRepo() {
		fmt.Printf("%s‚ùå Ce r√©pertoire n'est pas un d√©p√¥t Git!%s\n", ColorRed, ColorReset)
		gm.pause()
		return
	}

	fmt.Printf("%s%süîÑ REMOTE RAPIDE%s\n", ColorBold, ColorGreen, ColorReset)
	fmt.Println(strings.Repeat("‚ïê", 20))

	// V√©rifier s'il y a des commits en avance/retard
	// Fetch pour s'assurer que les informations sont √† jour
	gm.runGitCommand("fetch", "origin") // Fetch silently to update remote tracking branches
	ahead, _ := gm.runGitCommand("rev-list", "--count", "@{u}..HEAD")
	behind, _ := gm.runGitCommand("rev-list", "--count", "HEAD..@{u}")

	if ahead != "0" && ahead != "" {
		fmt.Printf("%süì§ %s commit(s) √† pusher%s\n", ColorYellow, ahead, ColorReset)
	}
	if behind != "0" && behind != "" {
		fmt.Printf("%süì• %s commit(s) √† puller%s\n", ColorYellow, behind, ColorReset)
	}
	if (ahead == "0" || ahead == "") && (behind == "0" || behind == "") {
		fmt.Printf("%s‚úÖ Votre branche est √† jour avec le remote.%s\n", ColorGreen, ColorReset)
	}

	fmt.Printf("\n%s1.%s Push rapide (origin + branche actuelle)\n", ColorCyan, ColorReset)
	fmt.Printf("%s2.%s Pull rapide (origin + branche actuelle)\n", ColorCyan, ColorReset)
	fmt.Printf("%s3.%s Status remote complet (fetch)\n", ColorCyan, ColorReset) // Renomm√© pour plus de clart√©
	fmt.Printf("%s4.%s Menu complet des remotes\n", ColorCyan, ColorReset)
	fmt.Printf("%s0.%s Retour\n", ColorRed, ColorReset)

	fmt.Printf("\n%sChoisissez: %s", ColorYellow, ColorReset)
	choice := gm.getUserInput()

	currentBranch := gm.getCurrentBranch()

	switch choice {
	case "1":
		fmt.Printf("%sPush vers origin/%s...%s\n", ColorYellow, currentBranch, ColorReset)
		output, err := gm.runGitCommand("push", "origin", currentBranch)
		if err != nil {
			fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
		} else {
			fmt.Printf("%s‚úÖ Push termin√©!%s\n", ColorGreen, ColorReset)
		}
		gm.pause()
	case "2":
		fmt.Printf("%sPull depuis origin/%s...%s\n", ColorYellow, currentBranch, ColorReset)
		output, err := gm.runGitCommand("pull", "origin", currentBranch)
		if err != nil {
			fmt.Printf("%s‚ùå Erreur: %s%s\n", ColorRed, output, ColorReset)
		} else {
			fmt.Printf("%s‚úÖ Pull termin√©!%s\n", ColorGreen, ColorReset)
		}
		gm.pause()
	case "3":
		gm.fetchFromRemote() // This function already pauses
	case "4":
		gm.handleRemoteManagement()
		return
	}
}

// Modification de la fonction main pour g√©rer les raccourcis
func main() {
	gm := NewGitManager()
	for {
		gm.clearScreen()
		gm.showMenu()
		choice := strings.ToUpper(gm.getUserInput()) // Convertir en majuscule pour les raccourcis

		switch choice {
		// RACCOURCIS ACC√àS RAPIDE
		case "S":
			gm.handleDetailedStatus()
		case "C":
			gm.handleQuickCommit() // Nouvelle fonction simplifi√©e
		case "F":
			gm.handleQuickFiles() // Nouvelle fonction simplifi√©e
		case "B":
			gm.handleQuickBranch() // Nouvelle fonction simplifi√©e
		case "R":
			gm.handleQuickRemote() // Nouvelle fonction simplifi√©e

		// MENU COMPLET (existant)
		case "1":
			gm.handleDetailedStatus()
		case "2":
			gm.handleBranchManagement()
		case "3":
			gm.handleCommitManagement()
		case "4":
			gm.handleRemoteManagement()
		case "5":
			gm.handleFileManagement()
		case "6":
			gm.handleTagManagement()
		case "7":
			gm.handleStashManagement()
		case "8":
			gm.handleStatistics()
		case "9":
			gm.handleTools()
		case "10":
			gm.changeDirectory()
		case "11":
			gm.initRepo()
		case "0":
			fmt.Println("üëã Au revoir!")
			return
		default:
			fmt.Printf("%s‚ùå Option invalide! Utilisez les chiffres (0-11) ou les lettres (S,C,F,B,R)%s\n", ColorRed, ColorReset)
			gm.pause()
		}
	}
}
